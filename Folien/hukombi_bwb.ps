%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: hukombi_bwb.pdf
%%Creator: Adobe Acrobat 10.1.14
%%For: Antonio Machicao
%%CreationDate: 03.06.2015, 12:43:22
%%BoundingBox: 0 0 667 140
%%HiResBoundingBox: 0 0 666.8021 139.8030
%%CropBox: 0 0 666.8021 139.8030
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 945 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2013-12-16T13:31:48+01:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2014-02-14T15:15:04+01:00"
   xmp:MetadataDate="2014-02-14T15:15:04+01:00"
   pdfx:PTEX.Fullbanner="This is MiKTeX-pdfTeX 2.9.4535 (1.40.13)"
   pdf:Producer="MiKTeX pdfTeX-1.40.13"
   pdf:Trapped="False"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:08d6e173-0c5e-4bdb-b931-464cb4803b2d"
   xmpMM:InstanceID="uuid:4e687aec-d4f6-496b-a2a5-a5beffa76f07"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [666.802 139.803 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -139.803 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 139.803 li
666.802 139.803 li
666.802 0 li
cp
clp
2.4 setflat
531.817 69.901 mo
531.817 33.893 561.006 4.70502 597.013 4.70502 cv
633.021 4.70502 662.211 33.893 662.211 69.901 cv
662.211 105.909 633.021 135.097 597.013 135.097 cv
561.006 135.097 531.817 105.909 531.817 69.901 cv
false sop
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
588.408 53.7947 mo
588.304 53.8998 li
588.492 53.9615 li
589.496 54.2162 li
590.517 54.9608 li
591.041 55.5905 li
591.569 55.953 li
591.569 55.953 591.899 55.7123 591.644 55.4283 cv
591.33 55.0533 li
590.716 54.3178 li
590.326 54.0944 li
589.846 53.9147 li
589.307 53.8104 li
588.767 53.7655 li
588.408 53.7947 li
cp
588.877 57.8658 mo
588.877 57.8658 588.818 57.8971 588.756 57.8854 cv
588.756 57.8854 588.662 57.8424 588.693 57.776 cv
588.771 57.6354 li
588.943 57.526 li
589.131 57.4322 li
589.334 57.3697 li
589.521 57.276 li
589.881 57.1354 li
590.193 57.026 li
590.396 56.9322 li
590.631 56.8697 li
590.881 56.8072 li
590.959 56.7291 li
590.974 56.6041 li
590.959 56.526 li
590.865 56.4479 li
590.74 56.4166 li
590.74 56.4166 590.615 56.401 590.537 56.4166 cv
590.459 56.4322 590.365 56.4947 590.318 56.4947 cv
590.271 56.4947 590.021 56.651 590.021 56.651 cv
589.677 56.8229 li
589.412 56.9322 li
589.162 57.026 li
588.865 57.0729 li
588.865 57.0729 588.662 57.0729 588.615 57.0885 cv
588.568 57.1041 588.306 57.0572 588.318 57.0572 cv
588.318 57.0572 588.154 57.0612 588.068 56.9947 cv
588.041 56.9733 588.096 56.8256 588.093 56.853 cv
588.093 56.853 588.21 56.7987 588.265 56.8065 cv
588.265 56.8065 588.393 56.7947 588.421 56.8065 cv
588.546 56.7905 li
588.999 56.7905 li
589.28 56.728 li
589.28 56.728 589.341 56.6862 589.369 56.5846 cv
589.412 56.3697 li
589.365 56.1041 li
589.271 55.9791 li
589.115 55.8697 li
588.865 55.7135 li
588.865 55.7135 588.724 55.6354 588.693 55.6354 cv
588.662 55.6354 588.459 55.5572 588.459 55.5572 cv
588.256 55.5729 li
588.256 55.5729 587.707 55.5905 587.588 55.7811 cv
587.452 55.8041 li
587.497 55.317 li
587.599 54.9752 li
587.888 54.9557 li
588.318 55.0416 li
588.537 55.1197 li
588.74 55.2291 li
589.037 55.3385 li
589.24 55.4479 li
589.443 55.526 li
589.756 55.5104 li
589.896 55.4635 li
589.927 55.3385 li
589.865 55.1666 li
589.709 54.9791 li
589.396 54.7447 li
589.068 54.5572 li
588.927 54.4479 li
588.771 54.3541 li
588.584 54.3072 li
588.334 54.2604 li
588.052 54.2604 li
588.052 54.2604 587.795 54.276 587.779 54.2604 cv
587.779 54.2604 587.65 54.1783 587.662 54.1354 cv
587.631 53.8854 li
587.623 53.7213 li
587.81 53.5819 li
588.013 53.4877 li
588.388 53.4408 li
589.404 53.4408 li
589.67 53.4569 li
590.045 53.5194 li
590.31 53.6283 li
590.748 53.8319 li
590.966 54.0033 li
591.373 54.4713 li
591.716 54.8619 li
592.029 55.3002 li
592.42 55.7533 li
592.795 56.2526 li
592.795 56.2526 592.888 56.3502 592.951 56.4401 cv
592.978 56.4791 593.009 56.651 592.998 56.6908 cv
592.966 56.9569 li
592.966 56.9569 592.857 57.1041 592.662 57.1315 cv
592.318 57.1354 li
591.334 57.1354 li
591.287 57.1354 590.99 57.1666 590.912 57.1822 cv
590.631 57.2447 li
590.349 57.3697 li
590.115 57.4635 li
589.724 57.6041 li
589.302 57.7447 li
588.877 57.8658 li
1 .599609 0 .199951 cmyk
ef
619.729 94.1237 mo
619.955 93.8334 619.993 93.0487 622.698 92.8463 cv
623.315 92.8471 623.623 93.6405 623.177 93.653 cv
622.979 93.6576 622.804 93.6373 622.804 93.6373 cv
622.231 93.653 622.373 93.9733 622.373 93.9733 cv
622.373 93.9733 622.572 94.4655 623.453 94.3983 cv
623.53 94.392 623.871 94.3815 623.955 94.3588 cv
625.189 94.0319 624.261 93.1256 624.261 93.1256 cv
623.989 92.8158 623.259 92.6237 623.259 92.6237 cv
622.955 92.5565 li
622.45 92.5084 li
621.524 92.6237 li
620.048 92.9322 619.451 92.824 619.451 92.824 cv
619.729 94.1237 li
f
617.927 90.203 mo
618.576 90.5006 li
618.576 90.5006 619.861 91.4686 621.322 91.2377 cv
621.398 91.226 623.989 90.9877 625.052 92.1283 cv
625.052 91.8873 625.074 91.4197 625.024 91.3151 cv
624.648 90.524 622.936 90.5311 622.936 90.5311 cv
621.023 91.0033 619.647 90.351 619.647 90.351 cv
619.647 90.351 618.567 89.5405 618.49 89.5026 cv
618.413 89.4635 617.655 89.2174 617.655 89.2174 cv
617.927 90.203 li
f
626.112 91.4127 mo
625.179 89.9342 li
624.708 89.3944 623.443 89.3549 623.443 89.3549 cv
622.672 89.317 li
622.672 89.317 621.476 89.4244 621.36 89.4322 cv
620.097 89.5209 618.683 88.9694 618.683 88.9694 cv
618.22 88.8151 li
618.22 88.8151 618.066 88.2201 618.066 88.1432 cv
618.066 88.0658 618.104 87.526 618.104 87.526 cv
618.345 88.3822 619.184 88.3365 619.184 88.3365 cv
619.45 88.4096 619.57 88.2975 619.57 88.2975 cv
620.936 88.3744 li
622.903 88.2975 li
622.903 88.2975 623.724 88.3729 623.8 88.3756 cv
625.351 88.4381 625.834 90.0885 625.834 90.0885 cv
626.112 91.4127 li
ef
626.142 86.5162 mo
625.564 85.7447 li
625.063 85.3209 li
624.523 84.9354 li
623.983 84.6264 li
623.482 84.3178 li
622.826 83.9713 li
621.9 83.4694 li
621.091 83.0065 li
620.396 82.4662 li
619.84 82.1197 li
619.532 81.7733 li
619.493 81.0787 li
619.57 80.2135 li
619.802 79.558 li
619.956 78.9791 li
620.072 78.3627 li
620.165 77.7838 li
620.127 77.36 li
620.072 76.8197 li
619.956 76.2408 li
620.405 75.9291 li
620.705 76.4342 li
620.82 76.858 li
620.859 77.36 li
620.82 77.8612 li
620.782 78.517 li
620.666 79.0565 li
620.473 79.6737 li
620.281 80.1365 li
620.127 80.6537 li
620.033 81.2322 li
620.127 81.7338 li
620.628 82.1197 li
621.284 82.3131 li
622.248 82.7369 li
623.095 83.0065 li
623.791 83.2772 li
624.407 83.6627 li
624.947 84.0487 li
625.487 84.4342 li
626.104 84.9733 li
626.683 85.6295 li
626.567 85.976 li
626.142 86.5162 li
f
627.125 84.2162 mo
626.679 83.3697 625.274 83.2905 625.274 83.2905 cv
625.138 83.2533 625.043 83.0983 625.043 83.0983 cv
625.043 83.0983 625.076 82.9987 625.197 82.9822 cv
625.8 82.899 627.048 83.4584 627.048 83.4584 cv
627.164 83.7533 li
627.125 84.2162 li
f
.1937 lw
0 lc
0 lj
3.8637 ml
[] 0 dsh
true sadj
627.125 84.2162 mo
626.679 83.3697 625.274 83.2905 625.274 83.2905 cv
625.138 83.2533 625.043 83.0983 625.043 83.0983 cv
625.043 83.0983 625.076 82.9987 625.197 82.9822 cv
625.8 82.899 627.048 83.4584 627.048 83.4584 cv
627.164 83.7533 li
627.125 84.2162 li
cp
@
621.013 76.8197 mo
621.013 76.8197 621.812 77.5494 621.939 78.0924 cv
621.888 78.244 621.091 80.2526 621.091 80.2526 cv
620.79 81.4369 621.047 81.9772 621.888 81.8065 cv
626.49 82.0807 li
626.066 80.808 li
626.021 80.8412 625.797 81.078 625.457 81.0447 cv
620.845 81.9545 621.977 80.0592 621.977 80.0592 cv
622.011 80.3744 622.632 78.324 622.632 78.324 cv
622.829 77.7975 622.248 77.0897 622.248 77.0897 cv
622.21 76.9291 621.025 75.6088 621.025 75.6088 cv
620.473 75.9322 li
620.473 75.9322 620.908 76.6139 621.013 76.8197 cv
f
623.189 80.3912 mo
623.632 79.7963 623.927 79.3717 624.076 79.1178 cv
624.664 77.8217 623.112 77.1889 623.112 77.1889 cv
622.903 77.0533 622.186 77.074 622.186 77.074 cv
621.377 76.6112 li
621.468 76.7272 620.991 76.2252 620.991 76.2252 cv
620.991 76.2252 622.978 76.3842 623.499 76.5826 cv
625.048 77.6596 625.304 78.653 624.191 79.735 cv
623.806 80.4838 li
623.499 81.4408 li
622.829 81.4166 li
623.189 80.3912 li
f
623.752 88.2514 mo
623.752 88.1744 623.752 87.9428 623.752 87.9428 cv
623.944 86.9791 li
624.06 86.2846 li
624.099 86.0155 li
624.099 85.8217 li
624.291 85.976 li
624.407 86.2846 li
624.484 86.5936 li
624.484 86.8248 li
624.446 87.0565 li
624.291 87.4811 li
624.291 87.4811 624.088 87.6998 624.215 88.3287 cv
624.228 88.3951 624.33 88.6151 624.33 88.6151 cv
624.06 88.6537 li
624.06 88.6537 623.906 88.5768 623.868 88.4994 cv
623.829 88.4225 623.752 88.3287 623.752 88.2514 cv
f
622.826 88.6928 mo
622.632 88.5385 li
622.44 88.2514 li
622.363 88.0592 li
622.363 87.8666 li
622.44 87.6354 li
622.517 87.2494 li
622.632 86.7865 li
622.672 86.2467 li
622.595 85.8612 li
622.325 85.3983 li
622.016 85.1276 li
621.631 84.7811 li
621.052 84.4721 li
620.396 84.1635 li
620.033 83.9713 li
619.455 83.6627 li
618.721 83.1229 li
618.336 82.7369 li
618.066 82.3131 li
617.912 81.7733 li
617.873 81.194 li
617.988 80.7311 li
618.181 80.2526 li
618.375 79.828 li
618.529 79.4811 li
618.567 78.7096 li
618.606 78.4401 li
618.49 77.8998 li
618.413 77.5526 li
618.336 77.3209 li
618.336 77.3209 618.146 76.683 618.261 76.5678 cv
618.378 76.4518 618.965 76.3397 618.898 76.3412 cv
618.478 76.2846 619.69 76.4545 619.455 76.6264 cv
619.527 76.744 619.493 77.1283 619.493 77.1283 cv
619.493 77.5912 li
619.377 78.0924 li
619.261 78.517 li
619.146 79.0182 li
619.03 79.4037 li
618.875 79.828 li
618.759 80.2135 li
618.683 80.5385 li
618.529 81.1166 li
618.49 81.6569 li
618.644 82.235 li
618.914 82.6979 li
619.261 83.0455 li
619.685 83.2377 li
620.319 83.5858 li
620.974 83.8549 li
620.974 83.8549 621.322 84.0092 621.437 84.0865 cv
621.554 84.1635 622.209 84.4342 622.209 84.4342 cv
622.517 84.7037 li
622.865 85.1276 li
623.134 85.4752 li
623.212 85.9381 li
623.173 86.7479 li
623.019 87.4811 li
623.019 88.1365 li
623.095 88.5385 li
623.019 88.7694 li
622.826 88.6928 li
ef
615.289 77.5526 mo
615.289 77.9381 li
615.212 78.9022 li
614.479 81.1561 li
614.329 81.9635 614.406 82.5936 614.711 83.0455 cv
615.366 84.203 li
615.597 84.6264 li
615.597 84.6264 616.142 86.3295 615.404 86.7479 cv
614.287 88.0072 613.939 86.5553 613.939 86.5553 cv
613.399 85.5131 li
613.052 84.3572 li
612.984 84.0651 612.358 83.2377 612.358 83.2377 cv
612.033 82.8522 li
611.724 82.5826 li
611.3 82.0807 li
610.953 81.8112 li
610.721 81.6569 li
610.721 81.6569 610.49 81.5416 610.414 81.5416 cv
610.336 81.5416 610.104 81.619 610.104 81.619 cv
610.104 81.619 609.912 81.8112 609.951 81.8881 cv
609.989 81.9655 610.104 82.235 610.104 82.235 cv
610.375 82.3893 li
610.915 82.6596 li
611.339 83.0065 li
611.84 83.6237 li
612.204 84.1635 li
612.628 85.244 li
612.859 86.0533 li
613.207 86.7865 li
613.721 87.6244 li
614.257 88.2885 615.322 87.8776 615.399 87.8776 cv
615.476 87.8776 615.829 87.5963 615.829 87.5963 cv
615.829 87.5963 616.177 87.6979 616.256 87.5436 cv
616.333 87.3905 616.408 86.5162 616.408 86.5162 cv
616.446 85.8612 li
616.408 85.3983 li
616.429 85.1283 616.138 84.3572 616.138 84.3572 cv
615.25 82.8522 li
614.812 81.8561 615.25 80.7701 615.25 80.7701 cv
615.829 79.2877 li
616.022 78.7096 li
616.254 77.7069 li
616.254 77.4369 li
616.047 76.9022 615.482 77.1666 615.404 77.2057 cv
615.328 77.244 615.289 77.5526 615.289 77.5526 cv
f
616.291 87.3881 mo
616.175 87.7733 li
616.022 88.0819 li
615.829 88.3131 li
615.597 88.5612 li
615.173 88.9076 li
614.056 89.4869 613.283 89.0619 613.283 89.0619 cv
613.333 89.1119 612.666 88.599 612.666 88.599 cv
611.184 86.4237 li
610.606 85.5365 li
609.681 84.4947 li
608.361 83.4928 607.714 84.726 607.714 84.726 cv
607.52 85.0346 li
608.254 83.3385 li
609.247 83.4655 610.414 84.2631 610.414 84.2631 cv
612.744 87.8119 li
613.361 88.5612 li
614.267 88.8319 614.672 88.3522 614.672 88.3522 cv
614.672 88.3522 614.833 88.2045 614.98 88.0436 cv
615.121 87.8905 615.52 87.8119 615.52 87.8119 cv
615.52 87.8119 615.752 87.619 615.829 87.5807 cv
615.906 87.5416 616.291 87.3881 616.291 87.3881 cv
ef
613.216 76.7526 mo
613.227 77.3104 li
613.471 77.5897 613.399 77.7838 613.399 77.7838 cv
613.436 77.7865 613.168 78.0541 613.168 78.0541 cv
612.782 78.478 li
612.435 79.0951 li
612.204 79.6737 li
612.127 80.2135 li
612.091 81.0502 612.624 82.149 612.624 82.149 cv
613.319 83.2194 li
613.816 84.1737 613.625 85.0541 613.625 85.0541 cv
613.476 85.7447 li
613.862 86.5162 li
614 86.7662 li
614 86.7662 614.093 86.3619 614.132 86.2846 cv
614.171 86.2076 614.24 84.6928 614.24 84.6928 cv
614.295 84.1471 614.054 83.392 614.054 83.392 cv
613.011 81.8627 612.82 81.1561 612.82 81.1561 cv
612.587 80.319 612.671 79.8705 612.936 79.558 cv
613.476 78.8248 li
613.785 78.4401 li
614.132 78.1315 li
614.132 78.1315 614.248 78.0155 614.363 77.8612 cv
614.479 77.7069 614.595 77.5526 614.595 77.5526 cv
614.672 77.3209 li
614.672 77.3209 614.633 77.0123 614.44 76.9354 cv
614.248 76.858 614.054 76.7037 614.054 76.7037 cv
613.611 76.4967 li
613.216 76.7526 li
f
612.828 90.6127 mo
612.859 90.6127 612.576 90.558 612.576 90.558 cv
612.099 90.5748 li
611.566 90.36 611.162 90.5436 611.162 90.5436 cv
610.193 91.2936 li
609.631 91.7623 li
609.256 92.1686 li
608.954 92.5014 608.709 92.3307 608.709 92.3307 cv
608.037 91.8561 li
608.256 91.7623 li
608.695 91.7377 li
609.704 91.0553 li
610.662 90.1373 li
610.881 89.9498 li
610.897 88.8932 610.131 89.1686 610.131 89.1686 cv
609.943 89.3248 li
609.756 89.6381 li
609.756 89.6381 609.568 89.7623 609.443 89.6686 cv
609.318 89.5748 609.287 89.3873 609.287 89.3873 cv
609.287 89.3873 609.431 88.9686 609.813 88.7369 cv
610.25 88.5729 610.599 88.5748 610.599 88.5748 cv
610.568 88.3256 li
610.318 87.7115 609.383 87.6393 609.383 87.6393 cv
607.965 87.6979 608.037 88.5436 608.037 88.5436 cv
607.918 88.9342 li
607.42 87.4615 li
608.068 87.4811 li
608.068 87.4811 608.843 87.2096 608.906 87.2096 cv
608.968 87.2096 609.129 87.1569 609.664 87.1686 cv
610.215 87.2155 611.006 88.1998 611.006 88.1998 cv
611.631 89.6061 li
611.682 89.7811 611.849 89.8873 611.849 89.8873 cv
612.474 90.2623 li
612.474 90.2623 612.797 90.6127 612.828 90.6127 cv
ef
616.466 89.5155 mo
617.437 87.1998 617.878 87.2592 617.506 84.4197 cv
617.547 84.3112 615.974 82.3256 615.974 82.3256 cv
615.836 82.1283 615.849 81.4506 615.849 81.4506 cv
615.97 80.6229 616.537 79.8256 616.537 79.8256 cv
616.722 79.6596 616.912 79.0131 616.912 79.0131 cv
617.068 77.8572 li
617.068 77.6072 li
617.769 77.3412 li
617.769 77.3412 617.605 80.0033 617.318 80.2322 cv
616.7 81.353 616.638 82.2174 617.131 82.8256 cv
617.787 83.7006 li
617.888 83.7924 618.162 83.7947 618.162 83.7947 cv
619.224 84.6381 li
620.474 85.7631 li
621.287 86.6686 li
621.838 87.6061 621.638 88.474 621.638 88.474 cv
621.5 88.5053 621.243 88.4244 621.243 88.4244 cv
621.224 87.6373 li
621.196 87.1412 620.693 86.6381 620.693 86.6381 cv
619.681 85.6061 li
618.474 84.6697 li
618.287 84.6072 li
618.256 84.8881 li
618.381 85.1072 li
618.693 85.4822 li
620.316 87.7408 li
620.722 88.449 li
619.632 88.3998 li
619.568 87.9811 li
619.484 87.0658 618.349 85.9822 618.349 85.9822 cv
618.256 86.5131 li
618.131 87.9186 li
618.287 88.6373 li
618.287 88.6373 618.331 89.6764 618.3 89.6139 cv
618.268 89.5514 616.466 89.5155 616.466 89.5155 cv
f
613.287 77.3256 mo
613.664 77.6483 li
618.937 77.9955 620.177 76.5826 620.177 76.5826 cv
620.623 76.3104 621.175 75.4655 621.175 75.4655 cv
621.756 75.2322 li
621.693 74.4822 li
621.073 74.7291 li
620.506 74.8256 li
620.131 74.7631 li
620.006 75.4197 li
619.804 76.2604 615.381 77.0447 615.381 77.0447 cv
614.693 77.0131 li
614.099 77.0131 li
613.662 77.1381 li
613.287 77.3256 li
f
613.849 76.8572 mo
613.849 76.8572 613.881 76.4822 613.912 76.4197 cv
613.943 76.3572 614.099 76.1697 614.099 76.1697 cv
616.515 76.1862 619.974 74.9506 619.974 74.9506 cv
620.474 74.8971 620.474 74.7631 620.474 74.7631 cv
620.916 74.0885 620.576 73.978 620.576 73.978 cv
619.818 74.2322 li
617.258 75.6158 613.466 75.7401 613.466 75.7401 cv
613.318 76.0756 li
613.349 76.5131 li
613.849 76.8572 li
f
613.443 75.5494 mo
613.367 75.2694 613.724 75.2682 613.724 75.2682 cv
615.499 75.244 618.599 74.1432 618.662 74.1127 cv
618.724 74.0807 619.724 73.6752 619.724 73.6752 cv
620.105 73.3651 620.513 73.5014 620.513 73.5014 cv
620.474 72.8002 li
620.287 72.3002 li
620.287 72.3002 620.127 72.0397 620.127 72.1022 cv
620.127 72.1647 619.443 73.0194 619.443 73.0194 cv
618.597 73.9303 615.412 74.5182 615.412 74.5182 cv
614.787 74.6127 li
613.849 74.6127 li
613.356 74.61 613.339 73.8893 613.339 73.8893 cv
612.881 74.3619 li
613.068 75.1432 li
613.443 75.5494 li
f
620.326 72.3256 mo
620.273 71.7987 619.334 72.1022 619.334 72.1022 cv
617.679 73.2924 614.904 73.8065 614.904 73.8065 cv
613.466 73.6889 613.256 74.2006 613.256 74.2006 cv
612.706 74.1412 612.568 73.8256 612.568 73.8256 cv
612.568 73.8256 612.412 72.6381 612.412 72.5756 cv
612.412 72.5131 612.256 72.2947 612.256 72.2947 cv
612.636 72.4115 li
613.317 73.1432 li
615.61 73.2565 616.537 71.9822 616.537 71.9822 cv
617.778 71.5182 618.188 71.3737 618.537 70.9506 cv
618.697 70.7565 618.849 70.7947 618.912 70.7631 cv
618.974 70.7322 620.127 70.7147 620.127 70.7147 cv
620.326 72.3256 li
ef
603.224 69.3256 mo
603.224 69.3256 603.944 68.7787 604.006 68.7006 cv
604.058 68.6334 604.256 68.4197 604.318 68.3572 cv
604.381 68.2947 604.693 68.0756 604.693 68.0756 cv
604.871 68.1072 605.537 68.0756 605.537 68.0756 cv
605.547 68.0912 605.648 68.2709 605.807 68.3881 cv
605.961 68.5006 606.193 68.7631 606.193 68.7631 cv
606.599 69.0447 li
606.599 69.0447 607.006 69.3256 607.068 69.3256 cv
607.131 69.3256 607.599 69.4822 607.599 69.4822 cv
608.006 69.6381 li
608.412 69.8881 li
608.974 70.0756 li
609.412 70.2947 li
609.662 70.4822 li
609.912 70.6697 li
610.577 71.192 li
610.968 71.4498 li
611.327 71.6881 li
611.566 72.1862 612.631 72.4197 612.631 72.4197 cv
612.349 71.9506 li
612.193 71.5131 li
612.162 70.9822 li
612.162 70.9822 612.099 70.6381 612.099 70.5756 cv
612.099 70.5131 612.006 70.2947 612.006 70.2947 cv
611.537 69.9822 li
611.14 69.735 li
610.349 69.5756 li
610.006 69.3881 li
609.419 69.074 li
609.419 69.074 608.912 68.8881 608.849 68.8881 cv
608.787 68.8881 608.412 68.8881 608.412 68.8881 cv
607.974 68.7322 li
606.897 68.192 606.193 67.3881 606.193 67.3881 cv
605.818 67.0131 li
605.506 66.9197 li
605.131 66.8881 li
604.599 66.9197 li
604.599 66.9197 604.384 66.9264 603.287 67.6697 cv
602.942 67.983 602.474 67.7631 602.474 67.7631 cv
602.484 67.6928 602.631 68.3881 602.631 68.3881 cv
602.974 69.0131 li
603.224 69.3256 li
ef
616.6 72.0358 mo
616.58 71.8373 616.099 71.6752 616.099 71.6752 cv
615.024 71.726 li
614.149 71.6322 li
613.681 71.476 li
613.337 71.319 li
613.056 71.1322 li
612.774 70.9447 li
612.149 70.4135 li
611.774 70.3197 li
611.368 70.101 li
611.047 69.7162 li
611.587 69.7572 li
611.587 69.7572 612.212 69.7885 612.274 69.7885 cv
612.337 69.7885 612.868 69.8197 612.868 69.8197 cv
612.868 69.8197 613.337 69.9447 613.399 69.9447 cv
613.462 69.9447 613.837 70.0697 613.837 70.0697 cv
614.368 70.351 li
615.118 70.6947 li
615.915 71.1647 616.493 70.601 616.493 70.601 cv
616.867 70.6635 li
617.136 71.6276 618.274 71.3822 618.274 71.3822 cv
618.166 71.5326 616.6 72.0358 616.6 72.0358 cv
f
608.693 51.8893 mo
608.381 51.7643 li
608.006 51.5455 li
607.756 51.358 li
607.412 51.2955 li
607.068 51.233 li
606.693 51.0143 li
606.162 50.6705 li
605.882 50.2662 li
605.599 49.7955 li
605.162 49.0768 li
604.912 48.4205 li
604.818 48.0768 li
604.818 47.858 li
604.943 47.7955 li
605.134 47.808 605.381 47.9518 605.381 47.9518 cv
605.716 48.0846 606.131 48.483 606.131 48.483 cv
606.506 48.7955 li
606.818 48.9518 li
607.506 49.2018 li
607.912 49.3268 li
608.943 49.5768 li
609.554 49.7401 610.068 50.0143 610.068 50.0143 cv
611.091 50.7233 611.224 51.5143 611.224 51.5143 cv
611.381 52.233 li
611.443 52.9205 li
611.412 53.4518 li
611.349 54.2018 li
611.412 54.608 li
611.568 55.0768 li
611.662 55.3893 li
611.681 55.6127 611.681 55.7487 611.662 55.7955 cv
611.535 55.8072 611.318 55.6705 611.318 55.6705 cv
611.189 55.5717 611.037 55.2955 611.037 55.2955 cv
610.849 54.983 li
610.756 54.5143 li
610.724 53.7955 li
610.662 53.2018 li
610.662 52.358 li
610.759 51.5405 610.131 50.6705 610.131 50.6705 cv
609.724 50.3268 li
609.193 50.0768 li
608.787 49.9205 li
607.943 49.733 li
607.162 49.608 li
606.412 49.2643 li
606.068 49.0143 li
605.646 48.9635 605.818 49.358 605.818 49.358 cv
605.974 49.733 li
606.224 50.0768 li
606.824 50.4733 607.099 50.483 607.099 50.483 cv
607.099 50.483 608.099 50.5143 608.193 50.5455 cv
608.287 50.5768 608.537 50.6705 608.537 50.6705 cv
608.849 50.8268 li
609.131 51.0455 li
609.381 51.3893 li
609.412 51.6705 li
609.221 52.067 608.693 51.8893 608.693 51.8893 cv
f
608.693 51.8893 mo
608.381 51.7643 li
608.006 51.5455 li
607.756 51.358 li
607.412 51.2955 li
607.068 51.233 li
606.693 51.0143 li
606.162 50.6705 li
605.882 50.2662 li
605.599 49.7955 li
605.162 49.0768 li
604.912 48.4205 li
604.818 48.0768 li
604.818 47.858 li
604.943 47.7955 li
605.134 47.808 605.381 47.9518 605.381 47.9518 cv
605.716 48.0846 606.131 48.483 606.131 48.483 cv
606.506 48.7955 li
606.818 48.9518 li
607.506 49.2018 li
607.912 49.3268 li
608.943 49.5768 li
609.554 49.7401 610.068 50.0143 610.068 50.0143 cv
611.091 50.7233 611.224 51.5143 611.224 51.5143 cv
611.381 52.233 li
611.443 52.9205 li
611.412 53.4518 li
611.349 54.2018 li
611.412 54.608 li
611.568 55.0768 li
611.662 55.3893 li
611.681 55.6127 611.681 55.7487 611.662 55.7955 cv
611.535 55.8072 611.318 55.6705 611.318 55.6705 cv
611.189 55.5717 611.037 55.2955 611.037 55.2955 cv
610.849 54.983 li
610.756 54.5143 li
610.724 53.7955 li
610.662 53.2018 li
610.662 52.358 li
610.759 51.5405 610.131 50.6705 610.131 50.6705 cv
609.724 50.3268 li
609.193 50.0768 li
608.787 49.9205 li
607.943 49.733 li
607.162 49.608 li
606.412 49.2643 li
606.068 49.0143 li
605.646 48.9635 605.818 49.358 605.818 49.358 cv
605.974 49.733 li
606.224 50.0768 li
606.824 50.4733 607.099 50.483 607.099 50.483 cv
607.099 50.483 608.099 50.5143 608.193 50.5455 cv
608.287 50.5768 608.537 50.6705 608.537 50.6705 cv
608.849 50.8268 li
609.131 51.0455 li
609.381 51.3893 li
609.412 51.6705 li
609.221 52.067 608.693 51.8893 608.693 51.8893 cv
cp
@
613.088 66.1822 mo
612.932 66.4147 613.144 66.5826 613.463 66.6498 cv
613.458 66.6908 614.056 66.8072 614.056 66.8072 cv
614.214 66.8139 614.369 66.6197 614.338 66.5248 cv
614.306 66.4322 614.149 66.3373 614.149 66.3373 cv
613.683 65.9322 613.088 66.1822 613.088 66.1822 cv
f
613.088 66.1822 mo
612.932 66.4147 613.144 66.5826 613.463 66.6498 cv
613.458 66.6908 614.056 66.8072 614.056 66.8072 cv
614.214 66.8139 614.369 66.6197 614.338 66.5248 cv
614.306 66.4322 614.149 66.3373 614.149 66.3373 cv
613.683 65.9322 613.088 66.1822 613.088 66.1822 cv
cp
@
598.881 58.733 mo
598.771 58.7604 598.599 58.608 598.599 58.608 cv
598.412 58.3307 598.537 58.0143 598.537 58.0143 cv
598.556 57.9713 598.666 57.851 598.724 57.8268 cv
598.787 57.7994 598.943 57.733 599.006 57.733 cv
599.349 57.6713 599.513 57.7147 599.787 57.8268 cv
599.845 57.8397 600.099 57.983 600.099 57.983 cv
600.412 58.233 li
600.58 58.4022 600.664 58.5272 600.662 58.608 cv
600.662 58.608 600.705 59.4838 600.599 59.5768 cv
600.265 60.0201 599.9 60.2905 599.506 60.3893 cv
598.068 60.733 li
597.662 60.8893 li
597.443 61.1705 li
597.175 61.8092 li
597.175 61.8092 596.931 60.3612 596.869 60.3295 cv
596.806 60.2987 596.693 59.4518 596.693 59.4518 cv
597.662 60.233 li
599.147 60.2389 599.912 59.483 599.912 59.483 cv
600.006 59.0768 li
599.998 58.851 599.987 58.726 599.974 58.7018 cv
599.974 58.7018 599.78 58.3756 599.256 58.5455 cv
599.115 58.653 598.881 58.733 598.881 58.733 cv
f
598.881 58.733 mo
598.771 58.7604 598.599 58.608 598.599 58.608 cv
598.412 58.3307 598.537 58.0143 598.537 58.0143 cv
598.556 57.9713 598.666 57.851 598.724 57.8268 cv
598.787 57.7994 598.943 57.733 599.006 57.733 cv
599.349 57.6713 599.513 57.7147 599.787 57.8268 cv
599.845 57.8397 600.099 57.983 600.099 57.983 cv
600.412 58.233 li
600.58 58.4022 600.664 58.5272 600.662 58.608 cv
600.662 58.608 600.705 59.4838 600.599 59.5768 cv
600.265 60.0201 599.9 60.2905 599.506 60.3893 cv
598.068 60.733 li
597.662 60.8893 li
597.443 61.1705 li
597.175 61.8092 li
597.175 61.8092 596.931 60.3612 596.869 60.3295 cv
596.806 60.2987 596.693 59.4518 596.693 59.4518 cv
597.662 60.233 li
599.147 60.2389 599.912 59.483 599.912 59.483 cv
600.006 59.0768 li
599.998 58.851 599.987 58.726 599.974 58.7018 cv
599.974 58.7018 599.78 58.3756 599.256 58.5455 cv
599.115 58.653 598.881 58.733 598.881 58.733 cv
cp
@
592.048 41.828 mo
592.283 41.6276 593.416 41.119 593.416 41.119 cv
593.412 41.0885 594.832 40.6635 594.832 40.6635 cv
594.832 40.6635 595.595 40.4447 595.794 40.4108 cv
598.61 39.974 600.773 39.7963 602.283 39.8776 cv
605.214 39.8639 607.694 40.5619 607.694 40.5619 cv
609.141 40.8729 612.151 42.0299 612.151 42.0299 cv
612.737 42.2533 614.709 43.2955 615.745 44.9147 cv
615.822 45.0358 617.921 48.4108 617.921 48.4108 cv
618.552 49.726 619.349 52.6549 619.349 52.6549 cv
619.743 54.3319 li
620.253 56.2037 li
621.011 59.067 621.164 60.6608 621.164 60.6608 cv
621.318 61.976 li
621.577 64.3397 li
621.67 65.574 li
621.923 67.5475 li
621.974 67.7709 621.315 69.8756 621.315 69.8756 cv
620.556 70.8873 li
619.843 71.0897 li
619.843 70.6854 li
620.657 69.6229 li
620.742 69.608 621.215 68.6112 621.215 68.5092 cv
621.215 68.4076 621.062 64.4096 621.062 64.4096 cv
620.961 62.2299 li
620.822 60.8639 li
620.862 60.7045 620.607 59.0924 620.607 59.0924 cv
620.613 58.9967 620.253 58.0299 620.253 58.0299 cv
619.894 56.7643 li
619.541 55.5463 li
619.168 54.0553 li
618.939 52.6959 li
618.909 52.2084 618.123 49.9283 618.123 49.9283 cv
617.099 47.5768 615.087 45.067 615.087 45.067 cv
613.821 43.903 li
606.882 39.6744 598.854 40.5619 598.581 40.5619 cv
598.581 40.5619 596.993 40.7506 595.439 41.0182 cv
593.992 41.3627 593.157 41.7748 593.157 41.7748 cv
592.783 42.0026 592.201 42.0807 592.201 42.0807 cv
591.918 42.0639 592.048 41.828 592.048 41.828 cv
f
604.318 42.9408 mo
604.462 43.0045 604.731 43.1569 605.128 43.3959 cv
606.768 44.4389 608.088 45.0834 609.382 45.4916 cv
609.483 45.5424 611.918 46.5658 612.52 47.9506 cv
613.089 48.778 613.33 49.5748 613.33 49.5748 cv
613.316 49.4283 613.684 50.7389 613.684 50.7389 cv
614.14 53.1166 li
614.443 53.9772 li
614.78 54.9889 615.507 55.5971 615.507 55.5971 cv
617.429 57.2701 li
617.429 57.2701 618.539 58.4947 618.475 59.5358 cv
618.539 59.7479 618.291 59.8471 618.188 59.4967 cv
618.068 59.0885 618.035 59.0065 617.905 58.7623 cv
617.671 58.3229 616.72 57.4733 616.72 57.4733 cv
615.607 56.6627 li
614.494 55.7994 li
613.734 55.1412 li
613.267 54.2947 613.381 53.5729 613.381 53.5729 cv
613.431 52.4584 li
613.56 51.9022 612.975 50.0299 612.975 50.0299 cv
612.757 49.5092 li
612.571 49.0678 li
612.216 48.3053 li
612.164 48.2623 611.966 48.0983 611.504 47.6483 cv
610.399 46.353 608.367 45.7748 608.367 45.7748 cv
607.49 45.5924 606.841 45.3944 606.19 45.067 cv
604.179 43.8451 604.318 42.9408 604.318 42.9408 cv
f
604.318 42.9408 mo
604.462 43.0045 604.731 43.1569 605.128 43.3959 cv
606.768 44.4389 608.088 45.0834 609.382 45.4916 cv
609.483 45.5424 611.918 46.5658 612.52 47.9506 cv
613.089 48.778 613.33 49.5748 613.33 49.5748 cv
613.316 49.4283 613.684 50.7389 613.684 50.7389 cv
614.14 53.1166 li
614.443 53.9772 li
614.78 54.9889 615.507 55.5971 615.507 55.5971 cv
617.429 57.2701 li
617.429 57.2701 618.539 58.4947 618.475 59.5358 cv
618.539 59.7479 618.291 59.8471 618.188 59.4967 cv
618.068 59.0885 618.035 59.0065 617.905 58.7623 cv
617.671 58.3229 616.72 57.4733 616.72 57.4733 cv
615.607 56.6627 li
614.494 55.7994 li
613.734 55.1412 li
613.267 54.2947 613.381 53.5729 613.381 53.5729 cv
613.431 52.4584 li
613.56 51.9022 612.975 50.0299 612.975 50.0299 cv
612.757 49.5092 li
612.571 49.0678 li
612.216 48.3053 li
612.164 48.2623 611.966 48.0983 611.504 47.6483 cv
610.399 46.353 608.367 45.7748 608.367 45.7748 cv
607.49 45.5924 606.841 45.3944 606.19 45.067 cv
604.179 43.8451 604.318 42.9408 604.318 42.9408 cv
cp
@
592.491 43.8959 mo
593.007 43.6151 594.782 43.194 594.782 43.194 cv
594.897 43.1303 596.506 42.8905 596.607 42.8905 cv
596.709 42.8905 599.593 42.4862 599.593 42.4862 cv
600.85 42.3959 601.82 42.7885 601.82 42.7885 cv
602.177 42.8893 602.478 43.1432 602.478 43.1432 cv
604.097 44.4088 li
605.72 45.5221 li
605.72 45.5221 606.682 46.028 606.834 46.0787 cv
606.986 46.1295 609.009 46.8373 609.213 46.8881 cv
609.415 46.9389 610.933 47.6483 610.933 47.6483 cv
610.933 47.6483 613.075 48.8717 612.893 49.7213 cv
611.992 48.7694 610.377 48.103 610.377 48.103 cv
605.966 46.6303 605.315 45.9276 605.315 45.9276 cv
604.097 45.1166 li
603.035 44.4088 li
601.638 43.2916 599.689 43.2057 599.689 43.2057 cv
597.765 43.0385 594.444 43.6776 594.444 43.6776 cv
593.122 44.0436 592.491 43.8959 592.491 43.8959 cv
f
607.037 42.1041 mo
606.934 42.108 607.732 42.1655 608.402 42.3334 cv
608.605 42.3842 609.598 42.7494 609.718 42.7885 cv
609.814 42.8209 611.518 43.5604 611.743 43.6998 cv
612.775 44.2905 613.473 44.776 613.872 45.1166 cv
615.026 46.1061 615.306 46.7604 615.306 46.7604 cv
616.119 47.8424 616.742 48.8729 617.162 50.3842 cv
617.516 51.599 li
617.718 52.6615 li
618.022 54.433 li
618.275 55.4955 li
617.263 54.0787 li
616.893 53.599 li
616.605 53.1166 li
616.302 52.2057 li
615.287 47.7076 614.479 46.7369 614.479 46.7369 cv
613.456 45.1862 611.894 44.3072 611.894 44.3072 cv
611.575 44.0905 609.618 43.194 609.618 43.194 cv
609.618 43.194 607.988 42.5873 607.796 42.5358 cv
606.629 42.2233 607.037 42.1041 607.037 42.1041 cv
ef
596.759 47.7479 mo
597.772 48.3178 598.429 48.4061 598.429 48.4061 cv
599.233 48.4076 600.15 48.6119 600.15 48.6119 cv
600.15 48.6119 600.757 48.9155 600.858 49.2194 cv
600.96 49.5221 600.96 49.6744 600.96 49.6744 cv
601.011 50.6365 li
601.011 50.6365 601.213 51.7494 601.365 51.8002 cv
601.516 51.8502 601.506 52.1334 603.642 52.6608 cv
603.74 52.6842 604.744 53.1072 604.86 53.267 cv
605.149 53.4928 605.335 53.6959 605.416 53.8744 cv
606.17 55.1088 605.67 57.7748 605.67 57.7748 cv
605.771 58.3319 li
606.728 59.1588 607.239 59.0405 607.239 59.0405 cv
607.239 59.0405 607.239 58.8385 607.239 58.7369 cv
607.239 58.6354 606.986 58.1295 606.986 58.1295 cv
606.024 53.824 li
605.61 53.017 603.794 52.2553 603.794 52.2553 cv
602.732 51.9889 602.681 51.1928 602.681 51.1928 cv
602.427 50.1295 li
602.124 49.0162 li
601.85 47.6041 600.605 47.6459 600.605 47.6459 cv
599.29 47.6459 li
598.632 47.5963 li
598.075 47.4947 li
597.215 47.1405 li
597.215 47.1405 596.257 46.9291 596.759 47.7479 cv
f
596.904 49.8471 mo
597.518 49.9772 li
597.973 50.1283 li
598.39 50.1459 598.48 50.028 598.48 50.028 cv
599.39 49.724 li
599.695 49.724 li
600.302 49.8248 li
601.488 50.1049 601.567 50.8373 601.567 50.8373 cv
600.858 50.6342 li
600.201 50.5846 li
599.188 50.5338 li
598.48 50.5846 li
597.484 50.9166 596.904 49.8471 596.904 49.8471 cv
f
596.557 45.724 mo
597.439 46.9127 598.373 46.2108 598.329 46.2811 cv
599.797 45.9772 li
600.193 45.9498 600.574 45.9315 600.684 45.9447 cv
601.349 45.9908 601.616 46.1002 601.783 46.151 cv
602.238 46.2826 602.6 46.3358 603.187 47.2428 cv
603.177 47.1576 603.694 48.2045 603.694 48.2045 cv
604.102 49.2709 li
604.734 51.6725 607.138 52.5604 607.138 52.5604 cv
608.556 52.9655 li
609.011 53.1674 li
609.011 53.1674 609.564 53.5912 609.669 53.8756 cv
609.718 54.0104 610.023 54.5846 610.023 54.5846 cv
610.327 55.4955 li
610.783 56.7643 li
611.187 57.119 li
611.693 57.524 li
612.152 58.1303 li
611.981 58.276 612.052 58.6373 612.052 58.6373 cv
612.052 58.694 611.593 58.7885 611.593 58.7885 cv
611.104 58.9237 li
610.874 58.8256 610.732 58.4342 610.732 58.4342 cv
610.58 57.6752 li
609.923 55.4955 li
609.423 54.2155 608.506 53.9772 608.506 53.9772 cv
607.24 53.3697 li
605.519 52.4088 li
604.265 51.817 603.593 49.6244 603.593 49.6244 cv
603.065 47.4244 602.074 46.9389 602.074 46.9389 cv
601.55 46.3959 598.953 46.703 598.953 46.703 cv
597.938 47.0377 li
598.052 46.9862 596.355 47.5971 596.355 47.5971 cv
596.355 47.5971 596.406 46.7877 596.406 46.6862 cv
596.406 46.5846 596.557 45.724 596.557 45.724 cv
ef
607.288 54.8326 mo
608.272 56.0358 607.845 58.2826 607.845 58.2826 cv
608.048 59.3451 li
608.707 60.3072 li
608.707 60.3072 609.871 61.6229 609.922 61.724 cv
611.271 63.2572 610.948 64.7155 610.427 65.8776 cv
609.922 66.485 li
609.82 66.6869 li
609.769 68.0033 li
609.971 68.3572 li
610.309 68.567 611.49 68.6112 611.49 68.6112 cv
611.49 68.6112 613.011 68.6112 613.113 68.6608 cv
613.215 68.7115 613.821 68.5604 613.67 68.4584 cv
613.517 68.3572 613.265 68.2565 613.265 68.2565 cv
613.265 68.2565 612.556 67.6998 612.506 67.5475 cv
612.455 67.3959 612.354 66.5358 612.354 66.4342 cv
612.354 66.3326 612.202 65.9791 612.202 65.9791 cv
612.161 65.8959 611.915 65.5092 611.743 66.0287 cv
611.774 65.9315 611.641 66.5858 611.641 66.5858 cv
611.49 67.1928 li
610.933 67.4467 li
610.863 67.4608 610.778 67.444 610.681 67.3959 cv
610.578 67.3197 610.629 66.9401 610.629 66.9401 cv
610.701 66.7572 611.035 66.2826 611.035 66.2826 cv
611.237 65.6244 li
611.49 64.7135 li
611.591 63.6471 li
611.338 62.7362 li
611.035 62.1283 li
609.82 60.5092 li
609.263 59.7506 li
608.707 58.9908 li
608.453 58.0807 li
608.397 55.8639 li
608.429 55.192 607.745 54.433 607.745 54.433 cv
606.975 54.1295 607.288 54.8326 607.288 54.8326 cv
ef
591.709 42.9205 mo
593.216 42.2604 li
595.086 41.828 li
599.591 41.1444 602.781 41.4225 602.781 41.4225 cv
605.425 41.8881 607.138 42.7389 607.138 42.7389 cv
607.138 42.7389 611.618 44.6283 613.315 46.6354 cv
613.825 47.3268 614.024 47.9506 614.024 47.9506 cv
615.289 51.8522 li
615.682 53.0631 616.099 53.5729 616.099 53.5729 cv
616.386 53.9569 616.757 54.1295 616.757 54.1295 cv
617.213 54.3319 li
617.655 54.5045 618.022 55.0397 618.022 55.0397 cv
618.546 55.7623 618.528 56.4096 618.528 56.4096 cv
618.632 56.4811 618.528 57.119 618.528 57.119 cv
618.073 56.5619 li
617.179 55.6608 li
615.191 54.5572 614.632 51.649 614.632 51.649 cv
614.277 50.1315 li
613.771 48.6127 li
613.222 45.7787 605.771 42.7885 605.771 42.7885 cv
602.636 41.2787 598.682 41.7772 598.682 41.7772 cv
598.205 41.7865 596.962 41.9791 596.962 41.9791 cv
593.718 42.5358 li
592.459 42.8112 li
591.709 42.9205 li
f
617.921 71.7987 mo
618.115 71.7877 618.233 71.5858 618.275 71.1908 cv
618.427 70.483 li
618.528 69.5717 li
618.579 68.8131 li
618.681 68.0033 li
618.681 67.3451 li
618.147 66.0358 616.352 65.2701 616.352 65.2701 cv
615.39 64.9662 li
614.681 64.5619 li
614.125 64.0526 li
613.568 63.6979 li
612.86 63.4955 li
612.444 63.4694 612.709 63.2428 612.709 63.2428 cv
612.709 63.2428 612.961 63.1412 613.164 63.1412 cv
613.366 63.1412 613.923 63.192 614.074 63.2428 cv
614.226 63.2924 614.732 63.3944 614.732 63.3944 cv
614.732 63.3944 615.185 63.8483 615.492 64.0014 cv
616.702 64.6061 619.388 66.5858 619.388 66.5858 cv
619.71 66.7858 619.692 67.4467 619.692 67.4467 cv
619.692 68.1041 li
619.641 68.8131 li
619.49 69.319 li
619.237 70.4322 li
619.136 71.1405 li
619.136 71.1405 618.984 71.3932 618.933 71.4947 cv
618.882 71.5963 618.629 71.849 618.629 71.849 cv
618.224 71.9506 li
617.921 71.7987 li
f
619.641 66.3326 mo
618.984 65.2194 li
618.984 65.2194 618.296 63.8561 616.958 63.2115 cv
616.182 62.9901 616.016 62.6576 616.016 62.6576 cv
615.999 62.6373 615.998 61.7748 615.998 61.7748 cv
616.155 60.4408 614.986 59.2947 614.986 59.2947 cv
614.986 59.2947 613.568 58.5358 613.468 58.485 cv
613.366 58.4342 612.02 58.0299 611.894 57.9791 cv
611.8 57.9408 610.882 57.2201 610.882 57.2201 cv
610.681 56.6627 li
611.085 56.9166 li
612.404 57.574 li
615.433 59.069 li
616.127 59.4428 616.504 59.9022 616.504 59.9022 cv
616.64 60.1776 616.909 61.4205 616.909 61.4205 cv
616.958 61.8815 617.415 62.1791 617.415 62.1791 cv
617.636 62.3803 619.49 64.1022 619.49 64.1022 cv
619.827 64.5748 619.641 66.3326 619.641 66.3326 cv
ef
619.641 66.3326 mo
618.984 65.2194 li
618.984 65.2194 618.296 63.8561 616.958 63.2115 cv
616.182 62.9901 616.016 62.6576 616.016 62.6576 cv
615.999 62.6373 615.998 61.7748 615.998 61.7748 cv
616.155 60.4408 614.986 59.2947 614.986 59.2947 cv
614.986 59.2947 613.568 58.5358 613.468 58.485 cv
613.366 58.4342 612.02 58.0299 611.894 57.9791 cv
611.8 57.9408 610.882 57.2201 610.882 57.2201 cv
610.681 56.6627 li
611.085 56.9166 li
612.404 57.574 li
615.433 59.069 li
616.127 59.4428 616.504 59.9022 616.504 59.9022 cv
616.64 60.1776 616.909 61.4205 616.909 61.4205 cv
616.958 61.8815 617.415 62.1791 617.415 62.1791 cv
617.636 62.3803 619.49 64.1022 619.49 64.1022 cv
619.827 64.5748 619.641 66.3326 619.641 66.3326 cv
cp
@
597.313 46.4608 mo
597.091 46.1088 597.164 45.6744 597.164 45.6744 cv
597.663 44.7987 601.618 45.2592 602.022 45.4713 cv
603.794 46.433 li
605.67 47.4447 li
608.911 49.11 611.16 49.6295 611.16 49.6295 cv
612.246 50.2819 612.097 52.9655 612.097 52.9655 cv
612.151 54.433 li
612.202 55.2936 li
612.304 55.9506 li
612.358 56.3951 612.758 56.6627 612.758 56.6627 cv
616.757 58.9908 li
616.757 58.9908 617.85 59.6842 617.971 61.4713 cv
617.97 62.1451 617.668 62.483 617.668 62.483 cv
617.692 62.6295 617.668 62.9381 617.668 62.9381 cv
617.668 62.9381 617.718 63.0397 618.073 63.2428 cv
618.427 63.4447 618.781 63.6471 618.781 63.6471 cv
618.73 63.192 li
618.528 62.483 li
618.477 60.8639 li
618.561 59.6608 li
618.597 59.353 618.414 59.1889 618.073 58.9908 cv
617.566 58.7377 li
615.543 57.726 li
614.834 57.3209 li
613.821 56.7135 li
613.164 56.0014 li
612.758 55.2428 li
612.506 54.3319 li
612.404 53.4713 li
612.404 52.7623 li
612.358 51.8319 li
612.304 50.8905 li
612.482 49.4362 609.364 48.6127 609.364 48.6127 cv
607.138 47.8502 li
606.226 47.4447 li
604.658 46.3319 li
604.646 46.2545 603.086 45.2694 603.086 45.2694 cv
601.013 44.1549 598.727 44.2885 598.727 44.2885 cv
597.75 44.369 li
596.94 44.4967 596.506 44.9147 596.506 44.9147 cv
596.455 45.3197 li
596.455 45.3197 596.539 45.7069 596.58 45.7994 cv
596.64 45.933 596.809 46.1803 596.809 46.1803 cv
597.313 46.4608 li
f
597.179 51.0834 mo
597.267 51.1459 599.897 53.2545 599.897 53.2545 cv
600.89 54.1705 602.413 54.442 602.413 54.442 cv
602.735 54.517 603.647 54.4733 603.647 54.4733 cv
604.554 54.7076 604.507 55.8639 604.507 55.8639 cv
604.785 57.5541 603.996 57.574 603.996 57.574 cv
603.772 57.7076 603.591 57.7772 603.591 57.7772 cv
603.591 57.7772 603.186 58.0299 603.541 58.0807 cv
603.894 58.1303 605.215 57.9791 605.215 57.9791 cv
604.758 54.7865 li
604.413 53.5358 602.663 53.6764 602.663 53.6764 cv
602.272 53.7545 601.741 53.692 601.741 53.692 cv
600.569 53.3951 599.835 52.6776 599.835 52.6776 cv
597.319 50.7865 li
596.591 50.5201 597.179 51.0834 597.179 51.0834 cv
f
617.194 71.192 mo
617.313 70.3815 li
617.608 69.317 li
617.64 69.1764 617.515 68.903 617.515 68.903 cv
617.515 68.8561 616.811 67.9811 616.811 67.9811 cv
616.725 67.817 616.78 67.2233 616.78 67.2233 cv
616.794 66.9127 616.617 66.2787 616.25 65.3209 cv
615.819 64.6217 615.087 64.4096 615.087 64.4096 cv
615.087 64.4096 614.681 64.2506 614.681 64.3053 cv
614.598 64.3326 614.597 64.4147 614.679 64.5494 cv
615.71 65.5905 615.896 66.7885 615.896 66.7885 cv
615.944 66.9733 615.932 66.9342 615.983 67.0358 cv
616.034 67.1373 616.149 67.4967 616.149 67.4967 cv
616.352 68.0033 li
616.909 69.1166 li
617.132 69.4108 616.605 70.1283 616.605 70.1283 cv
616.656 70.8373 li
617.194 71.192 li
f
617.111 71.444 mo
617.06 70.6854 li
617.06 70.6854 616.97 69.978 616.858 69.8756 cv
615.093 68.2623 613.011 68.3072 613.011 68.3072 cv
612.658 68.4076 li
612.827 68.6608 li
616.983 69.5748 616.507 70.6451 616.507 70.6451 cv
616.689 70.8619 616.605 70.9889 616.605 70.9889 cv
616.858 71.2924 li
617.111 71.444 li
f
611.288 68.1549 mo
611.288 68.1549 612.636 67.9967 612.749 67.9655 cv
614.791 67.3881 616.048 67.8002 616.048 67.8002 cv
616.296 67.8092 616.53 68.1686 616.53 68.1686 cv
616.671 68.0045 li
616.656 67.6998 li
616.624 67.2233 615.71 67.1139 615.71 67.1139 cv
613.475 67.2311 li
612.506 67.3959 li
610.984 67.8002 li
611.288 68.1549 li
f
609.091 55.2787 mo
609.111 55.8998 li
609.111 55.8998 609.007 57.8326 609.009 57.6244 cv
608.997 57.5865 609.054 58.692 609.466 59.0416 cv
609.71 59.192 610.236 59.6549 610.236 59.6549 cv
610.55 59.8776 611.065 60.8033 611.065 60.8033 cv
611.065 60.8033 611.524 62.3139 611.439 62.4322 cv
611.288 63.2428 li
611.52 63.7006 li
611.52 63.7006 612.354 63.5455 612.455 63.5455 cv
612.556 63.5455 612.86 63.4447 612.86 63.4447 cv
612.911 63.192 li
612.911 63.192 612.658 63.0397 612.556 63.0905 cv
612.455 63.1412 612.304 63.192 612.304 63.192 cv
612.151 62.5338 li
612.144 62.2514 611.573 61.1444 611.573 61.1444 cv
611.439 60.7623 li
611.136 59.8014 li
610.528 58.9408 li
610.085 58.7701 609.769 58.1303 609.769 58.1303 cv
609.589 57.8287 609.516 55.8502 609.516 55.8502 cv
609.477 55.6444 609.091 55.2787 609.091 55.2787 cv
f
614.986 64.1022 mo
615.162 64.2213 614.783 63.4955 614.783 63.4955 cv
614.986 61.8248 li
614.85 60.0065 613.011 58.8397 613.011 58.8397 cv
612.047 58.5358 li
611.49 58.5865 li
610.91 59.0697 610.224 58.8397 610.224 58.8397 cv
610.224 58.8397 608.858 59.1432 608.605 59.0416 cv
608.352 58.9408 608.099 58.6373 608.099 58.6373 cv
608.099 58.6373 607.95 58.1908 607.896 58.3334 cv
607.787 58.6276 606.986 58.3334 606.986 58.3334 cv
605.517 57.726 li
605.366 57.7772 li
604.253 57.9283 li
604.202 58.1303 li
604.455 58.2322 li
604.455 58.2322 606.882 59.0053 607.241 60.3959 cv
607.281 60.5514 607.845 60.5604 607.947 60.5604 cv
608.048 60.5604 609.162 60.1549 609.162 60.1549 cv
609.162 60.1549 609.556 59.1217 610.427 59.649 cv
610.556 59.728 611.692 59.5983 611.692 59.5983 cv
612.709 59.7506 li
613.914 60.0846 614.125 62.1791 614.125 62.1791 cv
614.226 62.3998 613.872 62.8881 613.872 62.8881 cv
613.872 62.8881 614.458 63.9655 614.53 64.0526 cv
614.824 64.403 614.986 64.1022 614.986 64.1022 cv
f
596.802 56.2623 mo
597.156 56.0092 li
597.46 55.7057 li
597.46 55.7057 597.814 55.3014 597.966 55.3014 cv
598.117 55.3014 598.471 55.3014 598.471 55.3014 cv
598.471 55.3014 599.372 55.4655 599.523 55.5162 cv
599.675 55.567 600.445 55.858 600.445 55.858 cv
601.458 56.0604 li
601.863 56.1112 li
602.52 56.4686 li
602.875 56.9244 li
603.026 57.228 li
603.077 57.6322 li
603.381 57.8854 li
604.043 58.0377 li
603.735 57.1264 li
603.229 55.9584 li
602.875 55.6561 li
602.47 55.453 li
600.074 55.0248 599.939 54.5416 599.939 54.5416 cv
599.686 54.2885 li
598.673 53.3783 li
597.329 51.9955 li
597.25 51.8756 596.59 51.478 596.59 51.478 cv
596.363 51.5385 596.498 51.7584 596.498 51.7584 cv
597.662 52.7201 li
597.662 52.7201 598.471 53.9342 598.673 54.0865 cv
598.877 54.2389 598.978 54.5416 598.978 54.5416 cv
598.821 54.819 598.522 54.5416 598.522 54.5416 cv
598.218 54.1373 li
596.534 52.5365 li
595.922 52.1803 596.346 52.8209 596.346 52.8209 cv
596.419 52.9428 597.46 54.1881 597.46 54.1881 cv
597.56 54.7447 li
597.307 54.9467 li
596.953 54.7955 li
596.75 54.8959 li
596.447 55.5033 li
596.802 56.2623 li
f
609.314 68.9647 mo
609.162 68.5604 li
609.111 68.1041 li
609.194 67.7233 609.769 67.953 609.769 67.953 cv
609.769 67.953 610.073 67.9022 610.175 67.9022 cv
610.275 67.9022 610.259 66.601 610.259 66.601 cv
609.516 66.5858 li
608.858 66.6365 li
608.858 66.6365 608.498 66.1791 608.707 66.1815 cv
610.069 66.192 610.124 64.2545 610.124 64.2545 cv
610.054 63.8014 609.769 64.0526 609.769 64.0526 cv
609.444 65.6139 608.302 65.8268 608.302 65.8268 cv
607.694 65.8776 li
607.289 65.776 li
607.087 65.574 li
608.569 64.7858 608.807 64.0526 608.807 64.0526 cv
609.007 63.8795 608.96 62.8881 608.96 62.8881 cv
608.858 62.3822 li
608.679 62.2076 608.504 62.4322 608.504 62.4322 cv
608.504 62.8373 li
608.513 63.0115 608.496 63.1967 608.453 63.3944 cv
607.444 65.4733 606.53 64.7643 606.53 64.7643 cv
606.328 64.5619 li
608.038 64.3326 607.745 60.9147 607.745 60.9147 cv
607.694 60.4584 li
607.492 60.2565 li
607.257 60.2826 li
607.444 60.7389 607.492 61.8248 607.492 61.8248 cv
607.554 61.8014 607.022 64.0514 605.619 63.7487 cv
605.52 63.7272 605.062 63.6471 605.113 63.5455 cv
605.164 63.4447 605.113 63.2428 605.265 63.192 cv
605.416 63.1412 605.72 62.9889 605.822 62.9381 cv
605.923 62.8881 606.379 62.4322 606.379 62.4322 cv
606.581 61.9772 li
606.632 61.3697 li
606.581 61.1166 li
606.529 61.0553 606.379 61.1166 606.379 61.1166 cv
606.277 61.319 li
606.122 62.7377 604.911 62.8881 604.911 62.8881 cv
604.354 63.1412 li
604.047 63.1412 li
603.894 63.0397 li
605.132 62.1608 605.215 61.2186 605.215 61.2186 cv
605.265 60.6608 li
605.265 60.4069 605.248 60.2885 605.215 60.3072 cv
605.195 60.2643 605.011 60.3072 605.011 60.3072 cv
605.015 60.2701 604.86 60.5092 604.86 60.5092 cv
604.607 61.319 li
604.272 62.2389 603.39 62.6354 603.39 62.6354 cv
602.913 62.6608 603.136 62.2811 603.136 62.2811 cv
604.257 61.1451 604.151 60.7623 604.151 60.7623 cv
604.097 59.9022 li
603.981 59.778 603.845 59.9022 603.845 59.9022 cv
603.692 60.358 li
603.554 61.2858 602.781 62.028 602.579 62.028 cv
602.377 62.028 602.224 62.1283 602.224 62.1283 cv
602.124 61.8756 li
602.478 61.6737 li
602.781 61.319 li
603.035 60.8639 li
603.076 60.569 603.093 60.3666 603.086 60.2565 cv
603.151 60.0104 603.184 59.8756 603.186 59.851 cv
603.096 59.7655 602.933 59.8014 602.933 59.8014 cv
602.89 59.7846 602.832 60.0541 602.832 60.0541 cv
602.648 60.603 602.429 60.974 602.173 61.1674 cv
602.173 61.1674 601.778 61.1295 601.922 61.0155 cv
602.288 60.7233 602.275 59.8014 602.275 59.8014 cv
602.224 58.5358 li
602.377 58.2322 li
603.186 58.0299 li
604.354 58.1303 li
604.658 57.8776 li
604.151 57.4733 li
603.086 57.3209 li
602.579 57.524 li
602.173 57.574 li
601.617 57.524 li
601.415 57.4225 li
600.302 56.7135 li
600.061 56.6705 599.91 56.6705 599.846 56.7135 cv
599.846 56.7135 599.619 56.944 599.947 57.0678 cv
600.09 57.1373 602.675 58.1072 601.415 60.8131 cv
601.383 60.9354 601.111 61.1166 601.111 61.1166 cv
601.013 61.199 600.302 61.2186 600.302 61.2186 cv
600.228 61.226 599.745 61.0155 599.745 61.0155 cv
599.29 60.5604 li
599.29 60.1041 li
597.973 60.3072 li
597.873 60.6112 li
597.923 60.8131 li
597.923 60.8131 598.33 61.203 598.379 61.2186 cv
598.533 61.2865 598.732 61.7748 598.732 61.7748 cv
598.746 61.7709 598.732 62.6854 598.732 62.6854 cv
598.648 65.5209 li
598.653 65.7838 599.129 66.6588 599.129 66.6588 cv
599.129 66.6686 599.56 66.6072 599.56 66.6072 cv
599.289 66.0924 599.102 65.3795 599.138 64.9155 cv
599.341 63.3944 li
599.341 63.3944 599.543 62.7865 599.543 62.6854 cv
599.543 62.5846 599.656 61.8365 599.656 61.8365 cv
599.656 61.8365 599.694 61.6737 599.846 61.6737 cv
599.998 61.6737 600.099 61.724 600.099 61.724 cv
600.173 61.7623 600.201 61.8756 600.201 61.8756 cv
600.215 61.8912 600.15 62.9889 600.15 62.9889 cv
599.491 65.3795 599.843 66.5924 599.843 66.5924 cv
599.879 66.5795 600.513 66.5182 600.513 66.5182 cv
600.125 65.8561 600.099 65.1686 600.099 65.1686 cv
600.25 64.4096 li
600.454 63.6471 li
600.605 62.483 li
600.707 62.2811 li
600.909 62.2811 li
600.96 62.7865 li
600.96 64.0526 li
600.804 65.0045 li
600.757 65.8483 600.966 66.4799 600.966 66.4799 cv
601.398 66.4428 li
601.263 65.8776 li
601.213 65.119 li
601.213 65.119 601.263 64.5143 601.263 64.4096 cv
601.263 64.3053 601.516 63.3944 601.516 63.3944 cv
601.718 63.0905 li
602.132 62.9576 602.173 63.4447 602.173 63.4447 cv
601.769 65.5233 li
601.769 65.5233 601.677 66.4811 601.718 66.5858 cv
601.772 66.7233 602.124 67.2947 602.124 67.2947 cv
602.201 67.4108 602.326 67.1928 602.326 67.1928 cv
602.32 67.2838 602.478 64.9155 602.478 64.9155 cv
602.478 64.9155 602.663 64.6139 602.991 64.7858 cv
603.548 64.8112 603.692 64.2037 603.692 64.2037 cv
603.692 64.2037 604.429 63.4869 604.455 64.8658 cv
604.46 65.1139 604.054 65.6451 604.054 65.6451 cv
603.647 66.0983 604.366 65.8795 604.366 65.8795 cv
604.911 65.6752 li
604.911 65.6752 605.315 65.574 605.416 65.574 cv
605.517 65.574 605.619 65.574 605.822 65.6752 cv
606.024 65.776 606.125 65.9791 606.125 65.9791 cv
605.771 66.6869 li
605.771 66.6869 605.688 67.2838 605.771 67.4467 cv
605.96 67.817 606.328 67.4467 606.328 67.4467 cv
606.328 67.4467 606.226 67.0416 606.277 66.9401 cv
606.328 66.8397 606.429 66.5858 606.429 66.5858 cv
606.569 66.3483 607.138 66.3834 607.138 66.3834 cv
608.163 66.8483 608.352 68.5092 608.352 68.5092 cv
608.46 68.7389 608.099 68.8131 608.099 68.8131 cv
608.302 69.2174 li
609.871 69.774 li
609.314 68.9647 li
ef
609.314 68.9647 mo
609.162 68.5604 li
609.111 68.1041 li
609.194 67.7233 609.769 67.953 609.769 67.953 cv
609.769 67.953 610.073 67.9022 610.175 67.9022 cv
610.275 67.9022 610.259 66.601 610.259 66.601 cv
609.516 66.5858 li
608.858 66.6365 li
608.858 66.6365 608.498 66.1791 608.707 66.1815 cv
610.069 66.192 610.124 64.2545 610.124 64.2545 cv
610.054 63.8014 609.769 64.0526 609.769 64.0526 cv
609.444 65.6139 608.302 65.8268 608.302 65.8268 cv
607.694 65.8776 li
607.289 65.776 li
607.087 65.574 li
608.569 64.7858 608.807 64.0526 608.807 64.0526 cv
609.007 63.8795 608.96 62.8881 608.96 62.8881 cv
608.858 62.3822 li
608.679 62.2076 608.504 62.4322 608.504 62.4322 cv
608.504 62.8373 li
608.513 63.0115 608.496 63.1967 608.453 63.3944 cv
607.444 65.4733 606.53 64.7643 606.53 64.7643 cv
606.328 64.5619 li
608.038 64.3326 607.745 60.9147 607.745 60.9147 cv
607.694 60.4584 li
607.492 60.2565 li
607.257 60.2826 li
607.444 60.7389 607.492 61.8248 607.492 61.8248 cv
607.554 61.8014 607.022 64.0514 605.619 63.7487 cv
605.52 63.7272 605.062 63.6471 605.113 63.5455 cv
605.164 63.4447 605.113 63.2428 605.265 63.192 cv
605.416 63.1412 605.72 62.9889 605.822 62.9381 cv
605.923 62.8881 606.379 62.4322 606.379 62.4322 cv
606.581 61.9772 li
606.632 61.3697 li
606.581 61.1166 li
606.529 61.0553 606.379 61.1166 606.379 61.1166 cv
606.277 61.319 li
606.122 62.7377 604.911 62.8881 604.911 62.8881 cv
604.354 63.1412 li
604.047 63.1412 li
603.894 63.0397 li
605.132 62.1608 605.215 61.2186 605.215 61.2186 cv
605.265 60.6608 li
605.265 60.4069 605.248 60.2885 605.215 60.3072 cv
605.195 60.2643 605.011 60.3072 605.011 60.3072 cv
605.015 60.2701 604.86 60.5092 604.86 60.5092 cv
604.607 61.319 li
604.272 62.2389 603.39 62.6354 603.39 62.6354 cv
602.913 62.6608 603.136 62.2811 603.136 62.2811 cv
604.257 61.1451 604.151 60.7623 604.151 60.7623 cv
604.097 59.9022 li
603.981 59.778 603.845 59.9022 603.845 59.9022 cv
603.692 60.358 li
603.554 61.2858 602.781 62.028 602.579 62.028 cv
602.377 62.028 602.224 62.1283 602.224 62.1283 cv
602.124 61.8756 li
602.478 61.6737 li
602.781 61.319 li
603.035 60.8639 li
603.076 60.569 603.093 60.3666 603.086 60.2565 cv
603.151 60.0104 603.184 59.8756 603.186 59.851 cv
603.096 59.7655 602.933 59.8014 602.933 59.8014 cv
602.89 59.7846 602.832 60.0541 602.832 60.0541 cv
602.648 60.603 602.429 60.974 602.173 61.1674 cv
602.173 61.1674 601.778 61.1295 601.922 61.0155 cv
602.288 60.7233 602.275 59.8014 602.275 59.8014 cv
602.224 58.5358 li
602.377 58.2322 li
603.186 58.0299 li
604.354 58.1303 li
604.658 57.8776 li
604.151 57.4733 li
603.086 57.3209 li
602.579 57.524 li
602.173 57.574 li
601.617 57.524 li
601.415 57.4225 li
600.302 56.7135 li
600.061 56.6705 599.91 56.6705 599.846 56.7135 cv
599.846 56.7135 599.619 56.944 599.947 57.0678 cv
600.09 57.1373 602.675 58.1072 601.415 60.8131 cv
601.383 60.9354 601.111 61.1166 601.111 61.1166 cv
601.013 61.199 600.302 61.2186 600.302 61.2186 cv
600.228 61.226 599.745 61.0155 599.745 61.0155 cv
599.29 60.5604 li
599.29 60.1041 li
597.973 60.3072 li
597.873 60.6112 li
597.923 60.8131 li
597.923 60.8131 598.33 61.203 598.379 61.2186 cv
598.533 61.2865 598.732 61.7748 598.732 61.7748 cv
598.746 61.7709 598.732 62.6854 598.732 62.6854 cv
598.648 65.5209 li
598.653 65.7838 599.129 66.6588 599.129 66.6588 cv
599.129 66.6686 599.56 66.6072 599.56 66.6072 cv
599.289 66.0924 599.102 65.3795 599.138 64.9155 cv
599.341 63.3944 li
599.341 63.3944 599.543 62.7865 599.543 62.6854 cv
599.543 62.5846 599.656 61.8365 599.656 61.8365 cv
599.656 61.8365 599.694 61.6737 599.846 61.6737 cv
599.998 61.6737 600.099 61.724 600.099 61.724 cv
600.173 61.7623 600.201 61.8756 600.201 61.8756 cv
600.215 61.8912 600.15 62.9889 600.15 62.9889 cv
599.491 65.3795 599.843 66.5924 599.843 66.5924 cv
599.879 66.5795 600.513 66.5182 600.513 66.5182 cv
600.125 65.8561 600.099 65.1686 600.099 65.1686 cv
600.25 64.4096 li
600.454 63.6471 li
600.605 62.483 li
600.707 62.2811 li
600.909 62.2811 li
600.96 62.7865 li
600.96 64.0526 li
600.804 65.0045 li
600.757 65.8483 600.966 66.4799 600.966 66.4799 cv
601.398 66.4428 li
601.263 65.8776 li
601.213 65.119 li
601.213 65.119 601.263 64.5143 601.263 64.4096 cv
601.263 64.3053 601.516 63.3944 601.516 63.3944 cv
601.718 63.0905 li
602.132 62.9576 602.173 63.4447 602.173 63.4447 cv
601.769 65.5233 li
601.769 65.5233 601.677 66.4811 601.718 66.5858 cv
601.772 66.7233 602.124 67.2947 602.124 67.2947 cv
602.201 67.4108 602.326 67.1928 602.326 67.1928 cv
602.32 67.2838 602.478 64.9155 602.478 64.9155 cv
602.478 64.9155 602.663 64.6139 602.991 64.7858 cv
603.548 64.8112 603.692 64.2037 603.692 64.2037 cv
603.692 64.2037 604.429 63.4869 604.455 64.8658 cv
604.46 65.1139 604.054 65.6451 604.054 65.6451 cv
603.647 66.0983 604.366 65.8795 604.366 65.8795 cv
604.911 65.6752 li
604.911 65.6752 605.315 65.574 605.416 65.574 cv
605.517 65.574 605.619 65.574 605.822 65.6752 cv
606.024 65.776 606.125 65.9791 606.125 65.9791 cv
605.771 66.6869 li
605.771 66.6869 605.688 67.2838 605.771 67.4467 cv
605.96 67.817 606.328 67.4467 606.328 67.4467 cv
606.328 67.4467 606.226 67.0416 606.277 66.9401 cv
606.328 66.8397 606.429 66.5858 606.429 66.5858 cv
606.569 66.3483 607.138 66.3834 607.138 66.3834 cv
608.163 66.8483 608.352 68.5092 608.352 68.5092 cv
608.46 68.7389 608.099 68.8131 608.099 68.8131 cv
608.302 69.2174 li
609.871 69.774 li
609.314 68.9647 li
cp
@
618.384 55.9354 mo
618.832 56.7135 li
619.49 58.8397 li
619.894 64.153 li
619.996 66.2826 li
619.996 68.0033 li
619.798 68.8944 619.49 69.1666 619.49 69.1666 cv
619.47 69.1627 619.287 68.1549 619.287 68.1549 cv
619.287 65.8776 li
619.186 63.2428 li
619.202 58.5678 618.396 56.8666 618.396 56.8666 cv
618.384 55.9354 li
f
618.384 55.9354 mo
618.832 56.7135 li
619.49 58.8397 li
619.894 64.153 li
619.996 66.2826 li
619.996 68.0033 li
619.798 68.8944 619.49 69.1666 619.49 69.1666 cv
619.47 69.1627 619.287 68.1549 619.287 68.1549 cv
619.287 65.8776 li
619.186 63.2428 li
619.202 58.5678 618.396 56.8666 618.396 56.8666 cv
618.384 55.9354 li
cp
@
610.832 57.1697 mo
611.684 59.6549 li
612.354 61.0658 li
612.961 62.5846 li
613.144 62.8014 612.961 63.192 612.961 63.192 cv
613.366 63.4955 li
614.479 64.0014 li
614.479 64.0014 614.834 64.0526 614.732 63.7994 cv
614.632 63.5455 613.973 62.7865 613.67 62.5338 cv
613.366 62.2811 613.315 62.2811 613.265 62.1283 cv
613.215 61.9772 612.556 59.8014 612.556 59.8014 cv
612.047 58.2322 li
611.388 57.3209 li
610.832 57.1697 li
f
582.938 101.675 mo
582.035 101.657 li
582.166 98.1655 li
582.184 96.3014 581.579 94.7787 581.579 94.7787 cv
580.875 93.0768 li
580.171 91.7858 li
579.525 90.3764 li
579.168 89.7162 579.121 88.9518 579.121 88.9518 cv
579.15 88.5131 li
579.169 87.4061 578.302 87.4615 578.302 87.4615 cv
574.648 86.7006 li
572.752 86.5365 li
568.591 86.5826 569.218 81.849 569.218 81.849 cv
569.309 81.2123 569.746 80.7155 569.746 80.7155 cv
570.216 79.8944 li
570.511 79.317 569.871 78.7487 569.871 78.7487 cv
569.374 78.4901 li
569.027 78.3287 569.218 77.4291 569.218 77.4291 cv
569.331 77.0944 li
569.471 76.5787 li
569.5 76.2947 569.218 76.0209 569.218 76.0209 cv
568.987 75.6412 569.218 74.7885 569.218 74.7885 cv
569.277 73.7135 li
569.218 73.1862 li
569.218 73.1862 569.181 72.5873 569.181 72.6459 cv
569.181 72.7045 569.159 72.5897 569.159 72.5897 cv
568.495 72.6151 li
566.431 72.6713 566.503 70.6264 566.503 70.6264 cv
566.596 69.8158 567.579 68.8139 567.579 68.8139 cv
568.573 67.0826 li
569.746 65.3619 li
571.047 63.6041 li
571.484 63.0365 571.363 61.8444 571.363 61.8444 cv
571.349 61.0194 li
571.335 59.9733 571.701 59.6697 571.701 59.6697 cv
572.346 58.6127 li
572.346 58.6127 572.943 57.1166 572.973 57.0658 cv
573.383 56.3865 573.653 53.4686 573.449 53.1881 cv
573.652 53.2838 571.918 52.3881 571.816 51.9889 cv
571.373 49.244 572.112 47.8365 572.112 47.8365 cv
573.931 46.2526 li
575.286 44.6264 li
576.987 42.0365 578.603 41.9733 578.603 41.9733 cv
579.05 40.8619 580.504 39.7401 580.504 39.7401 cv
580.504 39.7401 582.011 38.7194 584.748 39.1322 cv
585.556 39.153 585.812 39.9186 585.812 39.9186 cv
585.812 39.9186 586.132 42.3072 587.298 42.828 cv
588.794 43.824 589.638 42.7311 589.638 42.7311 cv
590.244 42.4557 590.47 43.1627 589.647 43.4276 cv
589.418 43.4721 588.757 43.5526 588.757 43.5526 cv
586.55 44.0104 585.927 42.2416 585.927 42.2416 cv
585.277 40.6002 li
585.033 39.5951 583.75 39.6608 583.75 39.6608 cv
581.99 39.778 li
581.589 39.7694 581.218 39.8471 580.875 40.0131 cv
580.378 40.3588 579.877 41.1869 579.877 41.1869 cv
579.584 41.5971 li
579.114 42.1444 li
578.685 42.4369 li
578.157 42.6713 li
578.157 42.6713 576.968 43.1615 575.729 44.7924 cv
575.364 45.4791 574.895 46.1365 574.401 46.7799 cv
573.227 47.6608 li
571.866 48.7311 572.182 50.1764 572.182 50.1764 cv
572.229 51.4354 li
572.266 51.8053 572.912 52.1666 573.754 52.4908 cv
574.1 52.6627 574.166 53.078 574.166 53.078 cv
574.224 54.1342 li
574.048 56.0709 li
573.696 57.4799 li
573.168 58.9061 li
572.657 59.8795 li
572.285 60.578 572.406 61.2018 572.406 61.2018 cv
572.405 62.5455 li
572.433 63.4276 571.288 64.3209 571.288 64.3209 cv
570.333 65.5385 li
569.16 67.5514 li
568.749 68.0795 li
568.047 68.7916 567.128 70.4389 567.128 70.4389 cv
567.171 70.9506 566.753 71.8764 568.378 71.8139 cv
568.672 71.8026 569.754 71.6947 569.754 71.6947 cv
570.641 71.8151 571.271 72.1928 571.271 72.1928 cv
571.698 72.7846 572.412 72.5936 572.623 72.5248 cv
572.968 72.4127 573.14 72.3619 572.809 71.4721 cv
572.744 71.2975 572.506 70.6588 572.506 70.6588 cv
572.644 70.5311 li
572.644 70.5311 573.493 71.7565 573.556 72.6315 cv
572.524 73.2865 572.011 73.0873 572.011 73.0873 cv
570.962 72.6627 li
570.149 72.5365 li
569.458 72.1889 569.868 72.4127 569.868 72.4127 cv
570.306 72.9752 569.94 74.4694 569.94 74.4694 cv
569.841 75.017 li
569.841 75.017 569.742 75.4135 570.129 75.4584 cv
570.421 75.4916 570.595 75.5084 570.675 75.528 cv
570.794 75.5565 570.948 75.6815 570.994 75.7506 cv
571.436 76.4252 571.675 76.2084 571.675 76.2084 cv
571.675 76.2084 572.242 76.1803 572.423 76.1737 cv
572.574 76.1686 572.795 76.774 572.326 76.774 cv
571.778 76.8112 571.463 76.817 571.463 76.817 cv
571.314 76.8151 570.823 76.4498 570.823 76.4498 cv
569.837 76.0233 569.275 78.6537 570.582 78.3405 cv
570.913 78.6264 571.132 79.6459 571.132 79.6459 cv
571.134 80.1244 570.045 81.3248 570.045 81.3248 cv
570.045 81.3248 569.771 81.8865 569.981 83.1405 cv
570.141 84.6596 571.484 85.7221 573.99 85.7221 cv
575.183 85.7694 577.041 85.8983 577.1 85.8983 cv
577.159 85.8983 578.668 85.9518 578.802 85.9576 cv
582.414 86.1166 586.788 82.1869 586.788 82.1869 cv
590.12 78.6705 li
591.552 77.4225 591.408 78.5846 591.408 78.5846 cv
592.182 78.8803 590.267 80.7772 590.267 80.7772 cv
590.414 80.6889 585.957 83.7123 585.957 83.7123 cv
584.185 84.8572 584.161 85.5463 584.161 85.5463 cv
584.027 86.8865 584.003 86.9381 584.003 86.9381 cv
584.003 86.9381 582.018 88.2709 581.69 88.1881 cv
581.463 88.1303 583.423 86.5604 583.423 86.5604 cv
583.775 85.7905 582.929 86.1139 582.765 86.1752 cv
581.476 87.0072 579.794 86.9647 579.794 86.9647 cv
579.759 87.953 li
579.883 89.6522 580.522 90.8463 580.522 90.8463 cv
581.403 92.3729 li
581.99 93.6049 li
582.77 95.026 582.988 96.8912 582.988 96.8912 cv
582.938 101.675 li
ef
0 lw
582.938 101.675 mo
582.035 101.657 li
582.166 98.1655 li
582.184 96.3014 581.579 94.7787 581.579 94.7787 cv
580.875 93.0768 li
580.171 91.7858 li
579.525 90.3764 li
579.168 89.7162 579.121 88.9518 579.121 88.9518 cv
579.15 88.5131 li
579.169 87.4061 578.302 87.4615 578.302 87.4615 cv
574.648 86.7006 li
572.752 86.5365 li
568.591 86.5826 569.218 81.849 569.218 81.849 cv
569.309 81.2123 569.746 80.7155 569.746 80.7155 cv
570.216 79.8944 li
570.511 79.317 569.871 78.7487 569.871 78.7487 cv
569.374 78.4901 li
569.027 78.3287 569.218 77.4291 569.218 77.4291 cv
569.331 77.0944 li
569.471 76.5787 li
569.5 76.2947 569.218 76.0209 569.218 76.0209 cv
568.987 75.6412 569.218 74.7885 569.218 74.7885 cv
569.277 73.7135 li
569.218 73.1862 li
569.218 73.1862 569.181 72.5873 569.181 72.6459 cv
569.181 72.7045 569.159 72.5897 569.159 72.5897 cv
568.495 72.6151 li
566.431 72.6713 566.503 70.6264 566.503 70.6264 cv
566.596 69.8158 567.579 68.8139 567.579 68.8139 cv
568.573 67.0826 li
569.746 65.3619 li
571.047 63.6041 li
571.484 63.0365 571.363 61.8444 571.363 61.8444 cv
571.349 61.0194 li
571.335 59.9733 571.701 59.6697 571.701 59.6697 cv
572.346 58.6127 li
572.346 58.6127 572.943 57.1166 572.973 57.0658 cv
573.383 56.3865 573.653 53.4686 573.449 53.1881 cv
573.652 53.2838 571.918 52.3881 571.816 51.9889 cv
571.373 49.244 572.112 47.8365 572.112 47.8365 cv
573.931 46.2526 li
575.286 44.6264 li
576.987 42.0365 578.603 41.9733 578.603 41.9733 cv
579.05 40.8619 580.504 39.7401 580.504 39.7401 cv
580.504 39.7401 582.011 38.7194 584.748 39.1322 cv
585.556 39.153 585.812 39.9186 585.812 39.9186 cv
585.812 39.9186 586.132 42.3072 587.298 42.828 cv
588.794 43.824 589.638 42.7311 589.638 42.7311 cv
590.244 42.4557 590.47 43.1627 589.647 43.4276 cv
589.418 43.4721 588.757 43.5526 588.757 43.5526 cv
586.55 44.0104 585.927 42.2416 585.927 42.2416 cv
585.277 40.6002 li
585.033 39.5951 583.75 39.6608 583.75 39.6608 cv
581.99 39.778 li
581.589 39.7694 581.218 39.8471 580.875 40.0131 cv
580.378 40.3588 579.877 41.1869 579.877 41.1869 cv
579.584 41.5971 li
579.114 42.1444 li
578.685 42.4369 li
578.157 42.6713 li
578.157 42.6713 576.968 43.1615 575.729 44.7924 cv
575.364 45.4791 574.895 46.1365 574.401 46.7799 cv
573.227 47.6608 li
571.866 48.7311 572.182 50.1764 572.182 50.1764 cv
572.229 51.4354 li
572.266 51.8053 572.912 52.1666 573.754 52.4908 cv
574.1 52.6627 574.166 53.078 574.166 53.078 cv
574.224 54.1342 li
574.048 56.0709 li
573.696 57.4799 li
573.168 58.9061 li
572.657 59.8795 li
572.285 60.578 572.406 61.2018 572.406 61.2018 cv
572.405 62.5455 li
572.433 63.4276 571.288 64.3209 571.288 64.3209 cv
570.333 65.5385 li
569.16 67.5514 li
568.749 68.0795 li
568.047 68.7916 567.128 70.4389 567.128 70.4389 cv
567.171 70.9506 566.753 71.8764 568.378 71.8139 cv
568.672 71.8026 569.754 71.6947 569.754 71.6947 cv
570.641 71.8151 571.271 72.1928 571.271 72.1928 cv
571.698 72.7846 572.412 72.5936 572.623 72.5248 cv
572.968 72.4127 573.14 72.3619 572.809 71.4721 cv
572.744 71.2975 572.506 70.6588 572.506 70.6588 cv
572.644 70.5311 li
572.644 70.5311 573.493 71.7565 573.556 72.6315 cv
572.524 73.2865 572.011 73.0873 572.011 73.0873 cv
570.962 72.6627 li
570.149 72.5365 li
569.458 72.1889 569.868 72.4127 569.868 72.4127 cv
570.306 72.9752 569.94 74.4694 569.94 74.4694 cv
569.841 75.017 li
569.841 75.017 569.742 75.4135 570.129 75.4584 cv
570.421 75.4916 570.595 75.5084 570.675 75.528 cv
570.794 75.5565 570.948 75.6815 570.994 75.7506 cv
571.436 76.4252 571.675 76.2084 571.675 76.2084 cv
571.675 76.2084 572.242 76.1803 572.423 76.1737 cv
572.574 76.1686 572.795 76.774 572.326 76.774 cv
571.778 76.8112 571.463 76.817 571.463 76.817 cv
571.314 76.8151 570.823 76.4498 570.823 76.4498 cv
569.837 76.0233 569.275 78.6537 570.582 78.3405 cv
570.913 78.6264 571.132 79.6459 571.132 79.6459 cv
571.134 80.1244 570.045 81.3248 570.045 81.3248 cv
570.045 81.3248 569.771 81.8865 569.981 83.1405 cv
570.141 84.6596 571.484 85.7221 573.99 85.7221 cv
575.183 85.7694 577.041 85.8983 577.1 85.8983 cv
577.159 85.8983 578.668 85.9518 578.802 85.9576 cv
582.414 86.1166 586.788 82.1869 586.788 82.1869 cv
590.12 78.6705 li
591.552 77.4225 591.408 78.5846 591.408 78.5846 cv
592.182 78.8803 590.267 80.7772 590.267 80.7772 cv
590.414 80.6889 585.957 83.7123 585.957 83.7123 cv
584.185 84.8572 584.161 85.5463 584.161 85.5463 cv
584.027 86.8865 584.003 86.9381 584.003 86.9381 cv
584.003 86.9381 582.018 88.2709 581.69 88.1881 cv
581.463 88.1303 583.423 86.5604 583.423 86.5604 cv
583.775 85.7905 582.929 86.1139 582.765 86.1752 cv
581.476 87.0072 579.794 86.9647 579.794 86.9647 cv
579.759 87.953 li
579.883 89.6522 580.522 90.8463 580.522 90.8463 cv
581.403 92.3729 li
581.99 93.6049 li
582.77 95.026 582.988 96.8912 582.988 96.8912 cv
582.938 101.675 li
cp
@
594.232 52.1705 mo
594.08 52.4686 594.758 53.0631 594.758 53.0631 cv
594.858 53.2018 595.759 54.3178 595.759 54.3178 cv
595.759 54.3178 596.611 55.0678 596.486 56.4967 cv
596.633 57.7947 596.136 57.9916 595.891 58.6862 cv
595.845 59.4635 596.24 60.9822 596.24 60.9822 cv
596.436 61.4447 596.948 64.2987 596.948 64.2987 cv
596.948 64.2987 597.146 67.0826 597.278 67.0826 cv
597.466 67.3014 598.655 67.3451 600.843 67.2147 cv
602.353 67.9197 602.238 69.7057 602.371 69.7057 cv
602.503 69.7057 602.89 69.5248 602.89 69.5248 cv
603.165 68.8651 li
603.312 68.5873 603.39 68.1635 603.39 68.1635 cv
602.806 67.985 602.536 67.6752 602.536 67.6752 cv
602.291 67.3209 602.406 66.8041 602.406 66.8041 cv
602.485 66.3014 601.525 66.3854 601.525 66.3854 cv
598.198 66.7565 597.99 66.4315 597.99 66.4315 cv
597.723 66.0951 597.19 61.6537 597.19 61.6537 cv
596.618 59.2811 li
596.611 58.5358 597.144 57.5604 597.144 57.5604 cv
597.352 56.6444 597.155 55.3002 597.155 55.3002 cv
596.807 54.3151 595.826 53.2615 595.826 53.2615 cv
595.185 52.6229 595.266 52.2748 595.266 52.2748 cv
596.471 49.7252 596.715 48.0072 596.715 48.0072 cv
596.882 46.5826 li
596.681 44.7963 596.156 44.601 596.156 44.601 cv
595.916 44.403 595.099 44.1393 595.099 44.1393 cv
594.256 43.858 593.085 43.8002 592.778 43.8092 cv
592.412 43.7772 591.523 43.9408 591.523 43.9408 cv
591.125 44.0084 590.665 44.2057 590.665 44.2057 cv
590.665 44.2057 590.068 44.4928 590.616 44.5209 cv
590.748 44.528 592.315 44.2709 592.712 44.3373 cv
593.107 44.4037 594.058 44.4147 595.533 45.0397 cv
596.761 45.4108 595.957 48.4315 595.957 48.4315 cv
594.232 52.1705 li
f
594.232 52.1705 mo
594.08 52.4686 594.758 53.0631 594.758 53.0631 cv
594.858 53.2018 595.759 54.3178 595.759 54.3178 cv
595.759 54.3178 596.611 55.0678 596.486 56.4967 cv
596.633 57.7947 596.136 57.9916 595.891 58.6862 cv
595.845 59.4635 596.24 60.9822 596.24 60.9822 cv
596.436 61.4447 596.948 64.2987 596.948 64.2987 cv
596.948 64.2987 597.146 67.0826 597.278 67.0826 cv
597.466 67.3014 598.655 67.3451 600.843 67.2147 cv
602.353 67.9197 602.238 69.7057 602.371 69.7057 cv
602.503 69.7057 602.89 69.5248 602.89 69.5248 cv
603.165 68.8651 li
603.312 68.5873 603.39 68.1635 603.39 68.1635 cv
602.806 67.985 602.536 67.6752 602.536 67.6752 cv
602.291 67.3209 602.406 66.8041 602.406 66.8041 cv
602.485 66.3014 601.525 66.3854 601.525 66.3854 cv
598.198 66.7565 597.99 66.4315 597.99 66.4315 cv
597.723 66.0951 597.19 61.6537 597.19 61.6537 cv
596.618 59.2811 li
596.611 58.5358 597.144 57.5604 597.144 57.5604 cv
597.352 56.6444 597.155 55.3002 597.155 55.3002 cv
596.807 54.3151 595.826 53.2615 595.826 53.2615 cv
595.185 52.6229 595.266 52.2748 595.266 52.2748 cv
596.471 49.7252 596.715 48.0072 596.715 48.0072 cv
596.882 46.5826 li
596.681 44.7963 596.156 44.601 596.156 44.601 cv
595.916 44.403 595.099 44.1393 595.099 44.1393 cv
594.256 43.858 593.085 43.8002 592.778 43.8092 cv
592.412 43.7772 591.523 43.9408 591.523 43.9408 cv
591.125 44.0084 590.665 44.2057 590.665 44.2057 cv
590.665 44.2057 590.068 44.4928 590.616 44.5209 cv
590.748 44.528 592.315 44.2709 592.712 44.3373 cv
593.107 44.4037 594.058 44.4147 595.533 45.0397 cv
596.761 45.4108 595.957 48.4315 595.957 48.4315 cv
594.232 52.1705 li
cp
@
598.548 84.0155 mo
595.978 87.244 li
592.504 92.4322 li
590.451 96.5651 li
587.806 105.974 li
589.054 105.974 li
589.929 98.349 594.261 91.2018 594.261 91.2018 cv
598.153 85.9916 li
602.765 80.2108 li
606.591 76.5424 li
606.591 76.5424 610.966 73.2311 611.367 72.8959 cv
611.662 72.2494 612.088 73.9283 612.088 73.9283 cv
612.506 74.7416 612.701 75.078 612.701 75.078 cv
613.364 77.1889 612.652 77.0905 612.652 77.0905 cv
611.181 77.2885 610.527 78.3764 610.527 78.3764 cv
609.507 79.9772 610.063 81.8627 610.063 81.8627 cv
607.976 81.6381 607.375 83.2162 607.375 83.2162 cv
606.131 85.5748 607.119 87.8815 607.119 87.8815 cv
607.119 87.8815 607.427 89.4186 607.361 90.5424 cv
607.352 90.6901 607.295 92.235 607.931 92.5858 cv
608.503 93.0033 608.986 93.0912 608.986 93.0912 cv
608.986 93.0912 609.337 93.7924 609.865 93.86 cv
610.902 93.9916 611.583 92.6295 611.648 92.5639 cv
611.715 92.4979 612.879 91.444 612.879 91.444 cv
612.879 91.444 613.538 91.0045 614.438 91.224 cv
614.548 91.2455 615.69 91.1576 615.69 91.1576 cv
616.898 91.0924 617.315 89.9061 617.315 89.9061 cv
617.315 89.9061 617.403 92.8053 619.384 93.399 cv
619.187 93.6627 619.216 94.1869 619.216 94.1869 cv
618.832 95.8151 620.021 96.6061 620.021 96.6061 cv
622.591 98.1697 625.183 96.6713 625.183 96.6713 cv
626.73 95.7905 626.809 93.619 626.809 93.619 cv
626.997 91.8541 626.787 90.8287 626.787 90.8287 cv
625.359 88.5619 626.831 86.9799 626.831 86.9799 cv
627.319 86.5397 627.645 85.6815 627.809 84.4049 cv
628 82.3014 626.923 81.5502 626.923 81.5502 cv
626.202 80.9623 626.413 80.3072 626.413 80.3072 cv
626.633 77.7506 li
626.655 76.476 626.106 75.4225 626.106 75.4225 cv
625.931 74.8295 624.964 74.3905 624.964 74.3905 cv
624.261 74.2362 623.229 74.2584 623.229 74.2584 cv
621.032 74.3905 621.179 74.8014 620.923 74.7045 cv
620.761 74.6432 621.232 74.1576 621.098 73.4186 cv
620.444 72.224 620.8 71.5092 620.8 71.5092 cv
621.929 69.9155 li
623.503 67.1237 623.237 63.733 623.237 63.733 cv
622.831 57.8268 621.706 54.6862 621.706 54.6862 cv
620.08 49.4362 617.612 44.7643 617.612 44.7643 cv
614.425 39.6237 607.55 38.6862 607.55 38.6862 cv
604.175 37.9987 598.346 38.2494 598.346 38.2494 cv
595.331 38.4838 593.628 39.233 593.628 39.233 cv
593.628 39.233 590.97 40.2631 589.857 42.0299 cv
589.822 42.0858 589.477 42.9569 589.593 43.0201 cv
589.9 43.1889 589.857 43.4166 589.857 43.4166 cv
589.947 43.7006 589.593 44.0639 589.593 44.0639 cv
588.765 45.349 li
588.765 45.349 588.345 46.0287 587.908 47.528 cv
587.916 47.5463 587.347 48.9623 587.347 48.9623 cv
587.107 49.9498 586.836 50.8717 586.836 50.8717 cv
586.757 50.9869 585.753 53.067 585.753 53.067 cv
585.457 54.6244 584.908 55.2389 584.908 55.2389 cv
580.915 61.4354 li
580.446 62.3065 580.413 63.1393 580.519 63.4518 cv
580.66 63.8658 580.763 64.0533 581.159 64.0533 cv
581.556 64.0533 582.386 64.1373 582.659 64.1315 cv
583.378 64.1158 583.416 64.694 583.416 64.694 cv
583.416 64.694 583.438 66.5319 583.456 66.6783 cv
583.479 66.8658 583.511 67.7799 583.511 67.7799 cv
583.511 67.7799 583.464 68.3658 584.229 68.6627 cv
584.253 68.7006 584.37 68.8424 584.102 69.2643 cv
584.041 69.3959 583.854 70.449 583.886 70.5365 cv
583.925 70.6459 583.903 70.7955 584.175 70.9115 cv
585.011 71.2709 585.003 71.8729 585.003 71.8729 cv
585.159 72.224 584.3 73.699 584.3 73.699 cv
583.815 74.4662 584.026 76.735 584.05 76.8803 cv
584.346 78.724 586.448 79.199 586.448 79.199 cv
588.573 79.2924 589.771 79.2272 589.771 79.2272 cv
592.256 78.994 li
592.998 78.9237 593.018 80.224 593.018 80.224 cv
594.956 88.774 li
595.611 87.808 595.569 87.8463 595.569 87.8463 cv
595.206 85.9354 li
594.12 80.9428 li
593.69 78.5834 593.718 79.2572 593.718 78.994 cv
593.718 78.7299 594.565 78.6432 594.565 78.6432 cv
600.343 77.649 600.929 75.8471 601.191 75.4662 cv
602.127 73.8295 603.651 69.0612 603.651 69.0612 cv
603.651 69.0612 604.148 68.449 604.596 68.319 cv
605.19 68.1459 605.753 68.4908 605.753 68.4908 cv
606.011 68.6381 606.636 69.3572 606.636 69.3572 cv
607.034 69.6459 607.925 69.9197 607.925 69.9197 cv
608.3 70.0065 609.62 70.569 609.768 70.6151 cv
609.894 70.6549 610.316 70.9947 610.44 71.0912 cv
610.554 71.1822 611.909 71.5319 611.909 71.5319 cv
611.641 70.9772 611.782 70.8873 610.682 70.0533 cv
610.515 69.9264 607.753 69.0221 607.753 69.0221 cv
607.041 68.6158 606.638 68.2115 606.495 68.0924 cv
605.518 67.2799 605.003 67.1471 605.003 67.1471 cv
604.003 66.9752 602.761 68.5924 602.761 68.5924 cv
602.346 69.4623 li
602.458 70.5424 600.548 74.619 600.548 74.619 cv
600.266 75.1498 600.138 76.11 598.677 76.392 cv
597.449 76.86 596.699 77.0639 595.238 77.328 cv
592.782 77.8822 591.057 77.8822 591.057 77.8822 cv
588.086 77.9408 li
582.953 78.0819 584.846 74.0006 584.846 74.0006 cv
585.309 72.8842 li
585.429 72.5604 585.658 72.7186 585.922 72.7299 cv
586.694 72.7643 586.048 72.0807 586.048 72.0807 cv
585.754 71.7709 585.353 71.0463 585.982 70.474 cv
585.998 70.3104 585.671 70.3658 585.671 70.3658 cv
585.011 70.7987 584.702 70.4213 584.702 70.4213 cv
584.304 69.8151 584.878 69.4518 584.878 69.4518 cv
584.878 69.4518 585.205 69.0885 586.429 69.4186 cv
586.714 69.4955 587.42 69.4166 587.42 69.4166 cv
587.925 69.3268 587.913 68.9264 587.913 68.9264 cv
587.256 68.4537 587.415 68.4901 587.097 68.3444 cv
586.931 68.2682 586.791 69.2233 585.725 68.4733 cv
585.163 67.9342 585.069 67.994 585.003 67.994 cv
584.39 67.994 584.312 68.1752 584.143 67.4987 cv
584.089 65.0455 li
584.113 64.3229 li
585.215 64.4647 li
585.881 64.699 586.245 64.6072 586.245 64.6072 cv
586.011 64.6967 587.375 64.4862 586.89 63.3158 cv
586.59 64.0397 585.132 63.6283 585.132 63.6283 cv
584.078 62.8658 582.614 63.2369 582.614 63.2369 cv
580.746 63.5072 581.596 62.1002 581.596 62.1002 cv
583.382 59.274 li
583.382 59.274 585.327 56.558 586.372 54.7858 cv
586.606 52.8776 586.941 52.142 586.941 52.142 cv
587.709 51.2924 587.923 50.5553 587.942 50.4916 cv
588.988 47.0436 589.155 46.3639 589.155 46.3639 cv
589.298 45.7799 590.006 44.6444 590.806 44.4994 cv
590.122 43.7975 590.289 42.3319 590.781 41.9635 cv
591.159 41.4674 592.19 40.7643 592.19 40.7643 cv
592.44 40.5768 595.284 39.233 598.503 39.1237 cv
601.611 39.017 604.253 39.1713 606.456 39.4362 cv
608.411 39.6725 613.628 41.9518 613.628 41.9518 cv
615.216 42.7565 616.456 44.5768 616.456 44.5768 cv
617.455 45.6393 619.565 50.5612 619.565 50.5612 cv
619.565 50.5612 621.108 55.8112 621.175 55.8112 cv
621.24 55.8112 622.322 59.3983 622.511 65.358 cv
622.275 69.319 620.361 70.4354 620.361 70.4506 cv
620.065 71.0447 620.074 71.4428 620.074 71.4428 cv
620.034 72.0756 620.14 72.4994 620.14 72.4994 cv
620.623 73.528 620.507 74.0194 620.507 74.0194 cv
620.569 74.1561 620.14 75.0194 620.14 75.0194 cv
620.14 75.0194 619.987 75.6697 621.23 75.4662 cv
621.49 75.4237 622.341 75.233 622.341 75.233 cv
624.232 74.9994 625.599 75.1264 626.02 77.4291 cv
626.02 77.4291 625.49 79.4389 625.691 81.1928 cv
627.388 83.0905 627.113 84.778 627.113 84.8444 cv
627.113 84.9096 627.129 85.0756 626.459 85.9225 cv
626.418 85.974 625.379 87.7069 625.379 87.7069 cv
624.951 89.5248 625.577 90.7006 625.577 90.7006 cv
626.195 91.7135 625.886 93.8783 625.886 93.8783 cv
625.127 97.8002 618.084 97.1967 620.065 93.1752 cv
618.392 92.0221 618.28 91.0104 618.28 91.0104 cv
617.407 88.4987 li
615.946 89.942 li
615.383 90.6444 614.034 90.6444 614.034 90.6444 cv
612.074 90.4901 li
612.074 90.4901 612.234 91.4608 611.25 92.0221 cv
609.886 93.7936 609.212 92.6697 609.212 92.6697 cv
607.721 91.6854 607.946 88.1002 607.946 88.1002 cv
606.653 86.5248 607.838 84.5365 607.838 84.5365 cv
608.199 82.3072 610.617 82.3639 610.617 82.3639 cv
610.617 82.3639 610.608 81.3729 610.617 80.8873 cv
610.632 80.078 611.149 78.9799 611.149 78.9799 cv
611.932 78.0729 612.668 77.9498 612.668 77.9498 cv
614.009 77.8842 613.683 76.5756 613.683 76.5756 cv
613.347 75.0455 li
612.747 72.8256 li
612.603 72.4127 611.892 71.5026 611.892 71.5026 cv
611.097 72.0201 li
606.658 75.4225 li
603.143 78.1459 598.548 84.0155 598.548 84.0155 cv
ef
574.901 48.8951 mo
574.863 48.9283 574.83 48.9537 574.798 48.9733 cv
573.994 49.5143 573.497 50.6112 573.497 50.6112 cv
573.341 51.8873 li
573.561 52.3834 574.159 51.9322 574.159 51.9322 cv
574.166 51.9322 574.275 51.1088 574.618 50.7045 cv
574.847 50.3158 575.449 49.7947 576.641 49.4908 cv
577.181 49.3873 577.408 49.2897 577.481 49.3033 cv
578.111 49.4244 577.733 49.8959 577.733 49.8959 cv
577.615 49.9772 576.455 50.228 576.455 50.228 cv
575.085 50.4557 574.836 51.8248 574.836 51.8248 cv
574.789 53.0201 574.164 53.8951 574.164 53.8951 cv
573.915 52.6815 573.185 52.3229 573.185 52.3229 cv
572.999 51.8873 572.975 51.4584 572.975 51.4584 cv
573 50.3295 573.391 49.4197 573.687 48.8951 cv
574.901 48.8951 li
cp
579.558 48.8951 mo
579.079 49.892 578.573 49.3334 578.312 48.901 cv
579.558 48.8951 li
cp
584.007 48.8951 mo
583.566 49.1576 583.259 49.2096 583.259 49.2096 cv
580.975 49.8014 li
580.975 49.8014 580.904 49.944 580.927 49.9674 cv
580.951 49.9908 581.404 51.3268 583.179 50.1576 cv
583.228 50.1276 584.105 49.4498 584.822 48.8944 cv
587.554 48.8951 li
587.378 49.4022 587.177 49.9674 587.177 49.9674 cv
587.567 49.6776 585.614 51.0084 585.614 51.0084 cv
584.773 51.5365 li
583.37 52.6283 581.827 52.3346 581.827 52.3346 cv
581.086 52.328 580.643 51.9322 580.643 51.9322 cv
580.383 51.7428 li
581.646 51.9467 582.673 52.024 583.398 51.6451 cv
583.445 51.6451 585.46 50.7553 586.632 49.2572 cv
586.602 48.6815 585.543 49.0678 585.543 49.0678 cv
584.834 49.4467 li
584.267 49.6459 582.524 51.1713 582.524 51.1713 cv
582.244 51.3893 581.84 51.233 581.84 51.233 cv
581.216 50.4244 580.17 50.2748 580.17 50.2748 cv
579.414 50.3217 li
578.695 50.5487 578.82 50.1444 578.82 50.1444 cv
578.82 50.1444 579.193 49.6151 581.528 49.1483 cv
582.097 49.0612 582.528 48.978 582.854 48.899 cv
584.007 48.8951 li
ef
583.2 43.8951 mo
582.809 43.9662 582.49 44.0951 582.381 44.1947 cv
582.324 44.1947 581.045 44.9127 580.521 45.5846 cv
580.521 45.5846 579.221 47.0416 579.151 47.7272 cv
579.151 47.7272 579.132 47.9811 579.349 48.0658 cv
579.349 48.0658 579.513 48.0963 579.548 48.0826 cv
579.689 47.942 580.41 46.4252 580.911 46.0326 cv
580.911 46.0326 582.772 44.4694 584.073 45.101 cv
585.082 45.8197 li
585.082 45.8197 585.392 46.0045 585.591 46.0155 cv
585.591 46.0155 586.246 46.0502 586.761 45.8865 cv
586.761 45.8865 587.459 45.7819 586.869 45.4686 cv
586.53 45.3268 li
586.22 45.2135 li
585.927 45.1334 585.5 44.8104 584.965 44.1947 cv
584.965 44.1947 584.59 43.9674 584.31 43.8959 cv
585.75 43.8951 li
586.202 44.3881 586.693 44.6655 586.726 44.6655 cv
586.771 44.6655 587.533 44.899 588.494 43.8971 cv
589.765 43.8951 li
589.734 43.9362 589.701 43.9772 589.663 44.0209 cv
588.62 44.5475 li
588.62 44.5475 587.819 45.0447 587.768 45.5416 cv
587.835 46.1776 588.72 45.5572 588.72 45.5572 cv
589.025 46.3764 588.289 46.7963 588.289 46.7963 cv
587.996 46.6303 586.845 46.7721 586.845 46.7721 cv
585.948 46.9994 585.259 47.7905 585.259 47.7905 cv
584.813 48.349 584.366 48.692 584.007 48.8998 cv
582.854 48.8951 li
583.945 48.6354 583.875 48.4108 583.976 48.1776 cv
583.976 48.1776 584.069 47.9115 583.744 48.0033 cv
583.673 48.024 582.537 48.2162 582.443 48.2162 cv
582.348 48.2162 582.182 48.2401 582.182 48.2401 cv
582.182 48.2401 582.96 47.6854 584.952 47.5604 cv
585.295 46.9994 585.232 47.0936 584.857 46.8666 cv
584.857 46.8666 584.054 46.6459 583.65 46.7721 cv
582.835 46.9428 582.229 47.5533 582.229 47.5533 cv
581.378 48.2631 li
580.47 48.8053 li
580.47 48.8053 580.606 48.3971 580.625 48.3697 cv
581.154 47.5912 582.703 46.7252 582.703 46.7252 cv
583.602 46.3697 li
584.163 45.724 582.821 45.849 582.821 45.849 cv
581.248 45.8483 580.123 47.6244 580.123 47.6244 cv
580.123 47.6244 579.646 48.7819 579.579 48.8549 cv
579.572 48.8697 579.565 48.8842 579.558 48.8983 cv
578.312 48.8951 li
578.201 48.7162 578.136 48.5541 578.136 48.5463 cv
578.136 48.5233 577.827 48.3346 577.78 48.3346 cv
577.733 48.3346 577.354 48.2401 577.354 48.2401 cv
575.811 48.1303 575.221 48.653 574.901 48.899 cv
573.687 48.8951 li
573.865 48.5807 574.007 48.4049 574.016 48.4049 cv
574.544 47.983 574.869 47.6783 575.39 47.5533 cv
575.39 47.5533 576.208 47.226 578.3 47.3639 cv
578.715 47.0455 578.277 46.7721 578.277 46.7721 cv
578.277 46.7721 577.164 46.4147 574.94 46.6776 cv
574.573 46.7709 574.41 46.4694 574.41 46.4694 cv
574.384 46.3971 575.348 45.101 575.396 45.101 cv
575.443 45.101 577.543 44.569 579.598 45.0385 cv
580.733 45.2987 580.263 44.317 580.152 44.2885 cv
580.061 44.1405 579.538 43.9955 579.048 43.8893 cv
583.2 43.8951 li
cp
584.822 48.8951 mo
585.329 48.5006 585.757 48.1686 585.757 48.1686 cv
586.421 47.8092 587.816 48.074 587.816 48.074 cv
587.825 48.0905 587.698 48.4721 587.554 48.8893 cv
584.822 48.8951 li
cp
575.363 46.2115 mo
576.273 46.1776 576.662 46.0983 576.662 46.0983 cv
577.32 46.0287 578.271 46.267 578.271 46.267 cv
578.57 46.3729 579.175 46.3803 579.175 46.3803 cv
579.796 46.2553 579.401 45.703 579.401 45.703 cv
578.57 45.1151 577.254 45.1947 577.254 45.1947 cv
575.632 45.1459 575.138 45.985 575.138 45.985 cv
575.077 46.0326 575.078 46.2401 575.363 46.2115 cv
ef
579.048 43.8951 mo
578.584 43.7885 578.15 43.7233 578.15 43.7233 cv
578.071 43.7338 579.222 43.2123 581.306 43.8612 cv
581.704 43.985 581.697 43.4479 581.697 43.4479 cv
581.632 43.0455 580.632 42.5338 580.691 42.6072 cv
579.455 42.2479 578.249 42.4147 578.249 42.4147 cv
579.863 40.524 li
579.863 40.524 580.254 40.4545 580.302 40.4545 cv
580.349 40.4545 581.165 40.2905 581.834 40.4791 cv
582.476 40.6608 583.291 42.0572 583.291 42.0572 cv
583.703 42.6264 li
584.476 43.8651 584.265 42.6072 584.265 42.6072 cv
584.265 42.6072 584.194 42.2748 584.171 42.228 cv
583.845 41.1342 583.352 40.5131 583.035 40.0502 cv
582.789 39.6928 581.841 39.6276 581.841 39.6276 cv
579.922 39.8385 582.768 38.9947 583.602 39.4115 cv
583.65 39.4354 584.029 40.0272 584.029 40.0272 cv
585.236 43.1744 li
585.375 43.4506 585.559 43.6947 585.75 43.901 cv
584.31 43.8951 li
584.286 43.8905 584.263 43.8854 584.241 43.8815 cv
583.897 43.8131 583.524 43.8346 583.2 43.8944 cv
579.048 43.8951 li
cp
588.494 43.8951 mo
588.566 43.8209 588.64 43.7389 588.715 43.6483 cv
588.96 43.3651 589.022 43.2694 589.022 43.2694 cv
589.566 43.1901 590.3 43.192 589.765 43.8971 cv
588.494 43.8951 li
cp
580.033 41.6908 mo
580.142 41.7194 580.4 41.7037 580.4 41.7037 cv
582.08 41.8268 582.201 42.851 582.201 42.851 cv
582.247 43.0787 583.019 43.8865 582.999 42.4381 cv
582.638 40.9674 580.966 40.9979 580.966 40.9979 cv
580.283 41.0026 579.968 41.308 579.968 41.308 cv
579.968 41.308 579.822 41.5858 580.033 41.6908 cv
ef
573.357 65.3002 mo
573.779 65.3002 574.03 65.2694 574.358 65.2213 cv
574.375 65.0338 574.459 63.8619 574.459 63.8619 cv
574.459 63.2553 li
574.559 62.7506 li
574.863 62.3971 li
574.863 62.3971 575.065 62.1947 575.267 62.1947 cv
575.47 62.1947 575.874 62.2447 575.874 62.2447 cv
576.581 62.2955 li
577.086 62.5487 li
578.013 62.9135 li
578.632 63.7819 li
578.797 64.074 li
579.227 64.2514 li
579.329 64.2826 579.718 64.4264 579.718 64.4264 cv
579.62 64.3112 578.677 62.7748 578.537 62.608 cv
578.537 62.608 578.267 62.3912 578.16 62.4174 cv
577.791 62.2377 577.548 62.226 577.548 62.226 cv
576.74 61.8729 li
576.184 61.5697 li
575.595 61.4662 li
575.015 61.4662 li
574.448 61.5045 li
573.843 61.5756 li
573.671 61.8256 li
573.874 62.4205 li
573.983 62.8588 li
573.983 63.9701 li
573.811 64.6119 li
573.357 65.3002 li
f
.1937 lw
573.357 65.3002 mo
573.779 65.3002 574.03 65.2694 574.358 65.2213 cv
574.375 65.0338 574.459 63.8619 574.459 63.8619 cv
574.459 63.2553 li
574.559 62.7506 li
574.863 62.3971 li
574.863 62.3971 575.065 62.1947 575.267 62.1947 cv
575.47 62.1947 575.874 62.2447 575.874 62.2447 cv
576.581 62.2955 li
577.086 62.5487 li
578.013 62.9135 li
578.632 63.7819 li
578.797 64.074 li
579.227 64.2514 li
579.329 64.2826 579.718 64.4264 579.718 64.4264 cv
579.62 64.3112 578.677 62.7748 578.537 62.608 cv
578.537 62.608 578.267 62.3912 578.16 62.4174 cv
577.791 62.2377 577.548 62.226 577.548 62.226 cv
576.74 61.8729 li
576.184 61.5697 li
575.595 61.4662 li
575.015 61.4662 li
574.448 61.5045 li
573.843 61.5756 li
573.671 61.8256 li
573.874 62.4205 li
573.983 62.8588 li
573.983 63.9701 li
573.811 64.6119 li
573.357 65.3002 li
cp
@
575.56 66.108 mo
575.98 66.11 li
575.98 66.11 576.202 66.0924 576.253 66.0924 cv
576.304 66.0924 576.61 66.0924 576.695 66.0924 cv
576.781 66.0924 577.122 65.9569 577.155 65.9569 cv
577.189 65.9569 577.854 65.5272 577.854 65.5272 cv
577.998 65.3365 li
577.906 65.0678 li
577.75 64.6967 li
577.75 64.6967 577.513 64.526 577.462 64.5092 cv
577.411 64.4916 577.189 64.3588 577.189 64.3588 cv
576.951 64.1713 li
576.628 63.9674 li
576.355 63.7631 li
576.168 63.61 li
575.845 63.5072 li
575.725 63.4908 li
575.64 63.4569 li
575.47 63.4908 li
575.334 63.5756 li
575.359 63.7037 li
575.427 63.8065 li
575.597 63.8744 li
575.785 63.9596 li
576.006 64.0447 li
576.278 64.1803 li
576.534 64.2826 li
576.738 64.4498 li
576.908 64.6615 li
577.013 64.8944 li
576.694 65.0248 li
576.47 65.0072 li
576.338 64.8158 li
576.218 64.7299 li
576.083 64.578 li
575.929 64.4916 li
575.81 64.4576 li
575.572 64.4752 li
575.371 64.578 li
575.349 64.7631 li
575.384 64.9518 li
575.41 65.2592 li
575.41 65.2592 575.589 65.2748 575.623 65.2748 cv
575.657 65.2748 575.861 65.3092 575.861 65.3092 cv
576.083 65.2584 li
576.083 65.2584 576.185 65.2076 576.218 65.2076 cv
576.253 65.2076 576.409 65.1635 576.461 65.1635 cv
576.511 65.1635 576.699 65.1979 576.699 65.1979 cv
576.947 65.3932 li
576.914 65.6151 li
576.643 65.7533 li
576.473 65.7533 li
576.201 65.8217 li
575.979 65.8561 li
575.611 65.8881 li
575.475 66.0065 li
575.56 66.108 li
f
575.56 66.108 mo
575.98 66.11 li
575.98 66.11 576.202 66.0924 576.253 66.0924 cv
576.304 66.0924 576.61 66.0924 576.695 66.0924 cv
576.781 66.0924 577.122 65.9569 577.155 65.9569 cv
577.189 65.9569 577.854 65.5272 577.854 65.5272 cv
577.998 65.3365 li
577.906 65.0678 li
577.75 64.6967 li
577.75 64.6967 577.513 64.526 577.462 64.5092 cv
577.411 64.4916 577.189 64.3588 577.189 64.3588 cv
576.951 64.1713 li
576.628 63.9674 li
576.355 63.7631 li
576.168 63.61 li
575.845 63.5072 li
575.725 63.4908 li
575.64 63.4569 li
575.47 63.4908 li
575.334 63.5756 li
575.359 63.7037 li
575.427 63.8065 li
575.597 63.8744 li
575.785 63.9596 li
576.006 64.0447 li
576.278 64.1803 li
576.534 64.2826 li
576.738 64.4498 li
576.908 64.6615 li
577.013 64.8944 li
576.694 65.0248 li
576.47 65.0072 li
576.338 64.8158 li
576.218 64.7299 li
576.083 64.578 li
575.929 64.4916 li
575.81 64.4576 li
575.572 64.4752 li
575.371 64.578 li
575.349 64.7631 li
575.384 64.9518 li
575.41 65.2592 li
575.41 65.2592 575.589 65.2748 575.623 65.2748 cv
575.657 65.2748 575.861 65.3092 575.861 65.3092 cv
576.083 65.2584 li
576.083 65.2584 576.185 65.2076 576.218 65.2076 cv
576.253 65.2076 576.409 65.1635 576.461 65.1635 cv
576.511 65.1635 576.699 65.1979 576.699 65.1979 cv
576.947 65.3932 li
576.914 65.6151 li
576.643 65.7533 li
576.473 65.7533 li
576.201 65.8217 li
575.979 65.8561 li
575.611 65.8881 li
575.475 66.0065 li
575.56 66.108 li
cp
@
575.776 66.7401 mo
575.81 66.978 li
575.912 67.1655 li
576.083 67.3014 li
576.218 67.353 li
576.457 67.3873 li
576.713 67.3014 li
576.866 67.1315 li
576.934 67.0123 li
576.9 66.8932 li
576.9 66.8932 576.985 66.8424 576.781 66.8424 cv
576.577 66.8424 576.457 66.8588 576.457 66.8588 cv
576.218 66.8248 li
576.099 66.7565 li
575.964 66.7221 li
575.81 66.7221 li
575.776 66.7401 li
f
575.776 66.7401 mo
575.81 66.978 li
575.912 67.1655 li
576.083 67.3014 li
576.218 67.353 li
576.457 67.3873 li
576.713 67.3014 li
576.866 67.1315 li
576.934 67.0123 li
576.9 66.8932 li
576.9 66.8932 576.985 66.8424 576.781 66.8424 cv
576.577 66.8424 576.457 66.8588 576.457 66.8588 cv
576.218 66.8248 li
576.099 66.7565 li
575.964 66.7221 li
575.81 66.7221 li
575.776 66.7401 li
cp
@
610.275 70.6854 mo
609.82 71.0397 li
609.415 71.3436 li
608.807 71.7479 li
607.998 72.3041 li
607.239 72.9155 li
606.429 73.6237 li
605.517 74.3326 li
604.709 74.8893 li
603.996 75.4967 li
603.49 75.9518 li
603.285 76.0287 603.035 76.0533 603.035 76.0533 cv
602.925 76.0397 602.957 75.8588 602.957 75.8588 cv
603.106 75.7201 603.256 75.6166 603.256 75.6166 cv
603.743 75.244 li
604.354 74.8385 li
604.961 74.3834 li
605.67 73.8268 li
606.226 73.3705 li
606.884 72.8139 li
607.441 72.3041 li
608.2 71.6459 li
609.162 70.6854 li
609.516 70.1791 li
609.82 69.9772 li
610.175 69.9772 li
610.427 70.1283 li
610.275 70.6854 li
f
610.275 70.6854 mo
609.82 71.0397 li
609.415 71.3436 li
608.807 71.7479 li
607.998 72.3041 li
607.239 72.9155 li
606.429 73.6237 li
605.517 74.3326 li
604.709 74.8893 li
603.996 75.4967 li
603.49 75.9518 li
603.285 76.0287 603.035 76.0533 603.035 76.0533 cv
602.925 76.0397 602.957 75.8588 602.957 75.8588 cv
603.106 75.7201 603.256 75.6166 603.256 75.6166 cv
603.743 75.244 li
604.354 74.8385 li
604.961 74.3834 li
605.67 73.8268 li
606.226 73.3705 li
606.884 72.8139 li
607.441 72.3041 li
608.2 71.6459 li
609.162 70.6854 li
609.516 70.1791 li
609.82 69.9772 li
610.175 69.9772 li
610.427 70.1283 li
610.275 70.6854 li
cp
@
605.782 75.0447 mo
605.879 75.1264 605.822 75.244 605.822 75.244 cv
605.517 75.6483 li
603.474 77.2772 li
602.984 77.6725 li
602.427 78.1283 li
601.971 78.5326 li
601.668 78.7858 li
601.582 78.8572 601.497 78.8572 601.415 78.7858 cv
601.412 78.642 601.617 78.4822 601.617 78.4822 cv
601.708 78.3881 602.377 77.9252 602.377 77.9252 cv
603.035 77.369 li
603.692 76.8627 li
604.556 76.2045 li
605.011 75.851 li
605.366 75.4967 li
605.517 75.3197 li
605.675 74.9596 605.782 75.0447 605.782 75.0447 cv
f
605.782 75.0447 mo
605.879 75.1264 605.822 75.244 605.822 75.244 cv
605.517 75.6483 li
603.474 77.2772 li
602.984 77.6725 li
602.427 78.1283 li
601.971 78.5326 li
601.668 78.7858 li
601.582 78.8572 601.497 78.8572 601.415 78.7858 cv
601.412 78.642 601.617 78.4822 601.617 78.4822 cv
601.708 78.3881 602.377 77.9252 602.377 77.9252 cv
603.035 77.369 li
603.692 76.8627 li
604.556 76.2045 li
605.011 75.851 li
605.366 75.4967 li
605.517 75.3197 li
605.675 74.9596 605.782 75.0447 605.782 75.0447 cv
cp
@
608.692 69.86 mo
608.575 70.0084 li
608.448 70.1561 li
608.047 70.5162 li
607.623 70.8651 li
607.125 71.278 li
606.798 71.5526 li
606.384 71.944 li
605.951 72.3248 li
605.581 72.6854 li
605.316 72.9174 li
605.062 73.151 li
604.765 73.4147 li
604.564 73.5631 li
604.375 73.6483 li
604.173 73.6158 li
604.131 73.4686 li
604.29 73.278 li
604.66 72.9811 li
605.019 72.6947 li
605.465 72.2826 li
605.92 71.8385 li
606.353 71.3834 li
606.808 70.9283 li
607.274 70.4947 li
607.718 70.0397 li
608.056 69.6061 li
608.216 69.574 li
608.406 69.574 li
608.533 69.6373 li
608.692 69.86 li
f
608.692 69.86 mo
608.575 70.0084 li
608.448 70.1561 li
608.047 70.5162 li
607.623 70.8651 li
607.125 71.278 li
606.798 71.5526 li
606.384 71.944 li
605.951 72.3248 li
605.581 72.6854 li
605.316 72.9174 li
605.062 73.151 li
604.765 73.4147 li
604.564 73.5631 li
604.375 73.6483 li
604.173 73.6158 li
604.131 73.4686 li
604.29 73.278 li
604.66 72.9811 li
605.019 72.6947 li
605.465 72.2826 li
605.92 71.8385 li
606.353 71.3834 li
606.808 70.9283 li
607.274 70.4947 li
607.718 70.0397 li
608.056 69.6061 li
608.216 69.574 li
608.406 69.574 li
608.533 69.6373 li
608.692 69.86 li
cp
@
607.548 69.3522 mo
607.316 69.4901 li
607.146 69.7115 li
606.925 69.9342 li
606.765 70.1139 li
606.48 70.3998 li
606.3 70.5905 li
606.109 70.8119 li
605.866 71.0768 li
605.697 71.2455 li
605.601 71.3522 li
605.454 71.4686 li
605.28 71.5905 605.168 71.4994 605.168 71.4994 cv
605.128 71.3287 605.306 71.1822 605.306 71.1822 cv
605.443 70.9822 li
605.633 70.7701 li
605.824 70.5795 li
606.099 70.2826 li
606.332 69.9979 li
606.511 69.7963 li
606.649 69.6276 li
606.83 69.4686 li
606.85 69.3307 li
606.808 69.1725 li
606.808 69.1725 606.957 69.1295 606.977 69.1295 cv
606.999 69.1295 607.157 69.151 607.157 69.151 cv
607.263 69.1822 li
607.39 69.2147 li
607.548 69.3522 li
f
607.548 69.3522 mo
607.316 69.4901 li
607.146 69.7115 li
606.925 69.9342 li
606.765 70.1139 li
606.48 70.3998 li
606.3 70.5905 li
606.109 70.8119 li
605.866 71.0768 li
605.697 71.2455 li
605.601 71.3522 li
605.454 71.4686 li
605.28 71.5905 605.168 71.4994 605.168 71.4994 cv
605.128 71.3287 605.306 71.1822 605.306 71.1822 cv
605.443 70.9822 li
605.633 70.7701 li
605.824 70.5795 li
606.099 70.2826 li
606.332 69.9979 li
606.511 69.7963 li
606.649 69.6276 li
606.83 69.4686 li
606.85 69.3307 li
606.808 69.1725 li
606.808 69.1725 606.957 69.1295 606.977 69.1295 cv
606.999 69.1295 607.157 69.151 607.157 69.151 cv
607.263 69.1822 li
607.39 69.2147 li
607.548 69.3522 li
cp
@
602.74 68.7947 mo
602.349 68.9662 li
601.771 69.8881 li
600.646 71.9037 li
598.794 74.5026 li
598.122 75.642 597.39 75.9342 597.39 75.9342 cv
596.968 76.0123 595.822 76.3041 595.822 76.3041 cv
597.006 75.4354 li
597.713 75.0658 598.756 73.8104 598.756 73.8104 cv
599.599 72.7631 li
600.271 71.8256 li
600.787 71.0131 li
601.396 70.0287 li
601.521 69.9381 601.959 68.1072 601.959 68.1072 cv
602.224 68.1537 li
602.443 68.3412 li
602.615 68.5447 li
602.74 68.7947 li
ef
602.74 68.7947 mo
602.349 68.9662 li
601.771 69.8881 li
600.646 71.9037 li
598.794 74.5026 li
598.122 75.642 597.39 75.9342 597.39 75.9342 cv
596.968 76.0123 595.822 76.3041 595.822 76.3041 cv
597.006 75.4354 li
597.713 75.0658 598.756 73.8104 598.756 73.8104 cv
599.599 72.7631 li
600.271 71.8256 li
600.787 71.0131 li
601.396 70.0287 li
601.521 69.9381 601.959 68.1072 601.959 68.1072 cv
602.224 68.1537 li
602.443 68.3412 li
602.615 68.5447 li
602.74 68.7947 li
cp
@
601.881 67.8412 mo
601.693 68.1381 li
601.131 68.8729 li
600.756 69.4354 li
600.209 70.2479 li
599.724 70.8572 li
599.256 71.4037 li
598.787 72.0131 li
598.209 72.6537 li
597.631 73.2787 li
597.115 73.8104 li
596.584 74.3412 li
596.052 74.8412 li
595.599 75.2787 li
594.477 76.4506 li
593.776 76.5385 li
594.662 75.6854 li
595.146 75.2322 li
595.943 74.5447 li
596.412 74.1072 li
596.959 73.6229 li
597.287 73.2787 li
597.552 72.9822 li
597.974 72.5131 li
598.427 71.9662 li
598.802 71.4506 li
599.459 70.6072 li
599.865 70.1229 li
600.552 69.0756 li
601.271 67.8572 li
601.521 67.3572 li
601.896 67.5912 li
601.881 67.8412 li
f
601.881 67.8412 mo
601.693 68.1381 li
601.131 68.8729 li
600.756 69.4354 li
600.209 70.2479 li
599.724 70.8572 li
599.256 71.4037 li
598.787 72.0131 li
598.209 72.6537 li
597.631 73.2787 li
597.115 73.8104 li
596.584 74.3412 li
596.052 74.8412 li
595.599 75.2787 li
594.477 76.4506 li
593.776 76.5385 li
594.662 75.6854 li
595.146 75.2322 li
595.943 74.5447 li
596.412 74.1072 li
596.959 73.6229 li
597.287 73.2787 li
597.552 72.9822 li
597.974 72.5131 li
598.427 71.9662 li
598.802 71.4506 li
599.459 70.6072 li
599.865 70.1229 li
600.552 69.0756 li
601.271 67.8572 li
601.521 67.3572 li
601.896 67.5912 li
601.881 67.8412 li
cp
@
601.021 66.8881 mo
600.756 67.2947 li
600.506 67.7322 li
599.912 68.4822 li
599.193 69.3412 li
598.099 70.7322 li
597.396 71.5604 li
596.927 72.1229 li
595.912 73.2787 li
595.474 73.7322 li
594.506 74.6854 li
594.021 75.1697 li
593.24 75.8729 li
592.017 76.8612 591.641 76.8893 591.641 76.8893 cv
591.192 76.9479 590.765 76.9479 590.765 76.9479 cv
590.765 76.9479 591.256 76.5912 591.287 76.5912 cv
591.318 76.5912 591.662 76.4354 591.662 76.4354 cv
592.068 76.2006 li
592.537 75.8729 li
593.131 75.4197 li
593.599 74.9822 li
594.662 73.9506 li
595.349 73.2787 li
595.943 72.6381 li
596.771 71.7006 li
597.584 70.7787 li
598.209 69.9979 li
599.349 68.5287 li
600.466 66.892 li
600.466 66.892 600.562 66.7045 600.588 66.6854 cv
601.111 66.2826 601.021 66.8881 601.021 66.8881 cv
f
601.021 66.8881 mo
600.756 67.2947 li
600.506 67.7322 li
599.912 68.4822 li
599.193 69.3412 li
598.099 70.7322 li
597.396 71.5604 li
596.927 72.1229 li
595.912 73.2787 li
595.474 73.7322 li
594.506 74.6854 li
594.021 75.1697 li
593.24 75.8729 li
592.017 76.8612 591.641 76.8893 591.641 76.8893 cv
591.192 76.9479 590.765 76.9479 590.765 76.9479 cv
590.765 76.9479 591.256 76.5912 591.287 76.5912 cv
591.318 76.5912 591.662 76.4354 591.662 76.4354 cv
592.068 76.2006 li
592.537 75.8729 li
593.131 75.4197 li
593.599 74.9822 li
594.662 73.9506 li
595.349 73.2787 li
595.943 72.6381 li
596.771 71.7006 li
597.584 70.7787 li
598.209 69.9979 li
599.349 68.5287 li
600.466 66.892 li
600.466 66.892 600.562 66.7045 600.588 66.6854 cv
601.111 66.2826 601.021 66.8881 601.021 66.8881 cv
cp
@
591.879 74.8217 mo
591.506 75.0756 li
591.006 75.4197 li
590.422 75.7162 li
589.99 75.9197 li
589.615 76.0756 li
589.107 76.2682 li
588.423 76.4315 li
587.502 76.517 li
586.81 76.5565 li
586.81 76.5565 585.822 76.7947 586.787 76.9506 cv
586.833 76.9576 587.349 76.9197 587.349 76.9197 cv
588.084 76.8412 li
588.822 76.8104 589.662 76.4506 589.693 76.4506 cv
589.724 76.4506 590.693 76.0447 590.693 76.0447 cv
592.302 74.9822 li
593.541 73.8588 li
593.791 73.3905 591.879 74.8217 591.879 74.8217 cv
f
591.879 74.8217 mo
591.506 75.0756 li
591.006 75.4197 li
590.422 75.7162 li
589.99 75.9197 li
589.615 76.0756 li
589.107 76.2682 li
588.423 76.4315 li
587.502 76.517 li
586.81 76.5565 li
586.81 76.5565 585.822 76.7947 586.787 76.9506 cv
586.833 76.9576 587.349 76.9197 587.349 76.9197 cv
588.084 76.8412 li
588.822 76.8104 589.662 76.4506 589.693 76.4506 cv
589.724 76.4506 590.693 76.0447 590.693 76.0447 cv
592.302 74.9822 li
593.541 73.8588 li
593.791 73.3905 591.879 74.8217 591.879 74.8217 cv
cp
@
582.063 84.5377 mo
580.173 84.9467 579.706 84.8881 579.706 84.8881 cv
573.771 85.1522 li
572.836 85.1229 572.348 84.9467 572.348 84.9467 cv
573.771 84.7721 li
575.582 84.8139 581.334 84.0346 581.334 84.0346 cv
583.758 83.7006 li
582.063 84.5377 li
f
582.063 84.5377 mo
580.173 84.9467 579.706 84.8881 579.706 84.8881 cv
573.771 85.1522 li
572.836 85.1229 572.348 84.9467 572.348 84.9467 cv
573.771 84.7721 li
575.582 84.8139 581.334 84.0346 581.334 84.0346 cv
583.758 83.7006 li
582.063 84.5377 li
cp
@
584.373 82.6776 mo
581.829 83.2037 li
578.463 83.6354 li
578.463 83.6354 576.669 83.703 576.617 83.7155 cv
576.442 83.7584 576.144 83.6522 576.144 83.6522 cv
576.131 83.5155 576.189 83.5014 576.189 83.5014 cv
576.189 83.5014 576.402 83.4479 576.483 83.4479 cv
576.563 83.4479 578.435 83.2877 578.435 83.2877 cv
582.386 82.7362 li
585.015 82.1217 li
586.158 81.8412 li
584.373 82.6776 li
ef
584.373 82.6776 mo
581.829 83.2037 li
578.463 83.6354 li
578.463 83.6354 576.669 83.703 576.617 83.7155 cv
576.442 83.7584 576.144 83.6522 576.144 83.6522 cv
576.131 83.5155 576.189 83.5014 576.189 83.5014 cv
576.189 83.5014 576.402 83.4479 576.483 83.4479 cv
576.563 83.4479 578.435 83.2877 578.435 83.2877 cv
582.386 82.7362 li
585.015 82.1217 li
586.158 81.8412 li
584.373 82.6776 li
cp
@
588.916 80.642 mo
586.44 81.1405 li
583.929 81.6315 li
580.645 82.1264 li
579.996 82.228 579.302 82.1264 579.302 82.1264 cv
579.057 82.1744 579.122 82.0365 579.122 82.0365 cv
579.129 81.9037 579.391 81.7662 579.482 81.7662 cv
579.572 81.7662 579.931 81.7213 579.931 81.7213 cv
580.384 81.7416 582.49 81.4069 582.49 81.4069 cv
584.963 80.9569 li
584.963 80.9569 586.851 80.5123 587.077 80.4674 cv
587.302 80.4225 589.185 79.9733 589.185 79.9733 cv
588.916 80.642 li
f
588.916 80.642 mo
586.44 81.1405 li
583.929 81.6315 li
580.645 82.1264 li
579.996 82.228 579.302 82.1264 579.302 82.1264 cv
579.057 82.1744 579.122 82.0365 579.122 82.0365 cv
579.129 81.9037 579.391 81.7662 579.482 81.7662 cv
579.572 81.7662 579.931 81.7213 579.931 81.7213 cv
580.384 81.7416 582.49 81.4069 582.49 81.4069 cv
584.963 80.9569 li
584.963 80.9569 586.851 80.5123 587.077 80.4674 cv
587.302 80.4225 589.185 79.9733 589.185 79.9733 cv
588.916 80.642 li
cp
@
584.442 70.6393 mo
584.128 70.5248 li
583.757 70.5248 li
583.5 70.6393 li
583.244 70.7819 li
582.845 71.0104 li
582.445 71.2377 li
581.903 71.5807 li
581.617 71.7514 li
581.475 71.8373 li
581.132 71.9518 li
581.104 71.8658 li
581.218 71.7514 li
581.447 71.5807 li
581.675 71.4096 li
582.216 70.9822 li
582.702 70.6674 li
583.158 70.4115 li
583.472 70.2115 li
583.728 70.0405 li
584.027 69.851 li
584.3 69.8983 li
584.47 70.3256 li
584.442 70.6393 li
f
584.442 70.6393 mo
584.128 70.5248 li
583.757 70.5248 li
583.5 70.6393 li
583.244 70.7819 li
582.845 71.0104 li
582.445 71.2377 li
581.903 71.5807 li
581.617 71.7514 li
581.475 71.8373 li
581.132 71.9518 li
581.104 71.8658 li
581.218 71.7514 li
581.447 71.5807 li
581.675 71.4096 li
582.216 70.9822 li
582.702 70.6674 li
583.158 70.4115 li
583.472 70.2115 li
583.728 70.0405 li
584.027 69.851 li
584.3 69.8983 li
584.47 70.3256 li
584.442 70.6393 li
cp
@
584.214 69.2135 mo
584.156 69.1842 583.843 69.1276 583.843 69.1276 cv
583.615 69.2701 li
583.186 69.5553 li
582.959 69.6979 li
582.502 69.9545 li
582.216 70.1256 li
581.988 70.3822 li
581.759 70.4967 li
581.418 70.6112 li
581.189 70.6967 li
581.145 70.7565 580.99 70.6967 580.99 70.6967 cv
580.99 70.6967 580.962 70.5826 581.076 70.5248 cv
581.189 70.4686 581.361 70.3822 581.447 70.3256 cv
581.532 70.2682 582.102 69.7838 582.102 69.7838 cv
582.873 69.2135 li
583.529 68.8139 li
583.529 68.8139 583.985 68.5858 584.043 68.5858 cv
584.099 68.5858 584.214 68.3002 584.214 68.3002 cv
584.47 68.2147 li
584.898 68.5572 li
584.898 68.5572 584.812 68.7565 584.784 68.8424 cv
584.756 68.9283 584.613 69.1561 584.613 69.1561 cv
584.613 69.1561 584.27 69.2416 584.214 69.2135 cv
f
584.214 69.2135 mo
584.156 69.1842 583.843 69.1276 583.843 69.1276 cv
583.615 69.2701 li
583.186 69.5553 li
582.959 69.6979 li
582.502 69.9545 li
582.216 70.1256 li
581.988 70.3822 li
581.759 70.4967 li
581.418 70.6112 li
581.189 70.6967 li
581.145 70.7565 580.99 70.6967 580.99 70.6967 cv
580.99 70.6967 580.962 70.5826 581.076 70.5248 cv
581.189 70.4686 581.361 70.3822 581.447 70.3256 cv
581.532 70.2682 582.102 69.7838 582.102 69.7838 cv
582.873 69.2135 li
583.529 68.8139 li
583.529 68.8139 583.985 68.5858 584.043 68.5858 cv
584.099 68.5858 584.214 68.3002 584.214 68.3002 cv
584.47 68.2147 li
584.898 68.5572 li
584.898 68.5572 584.812 68.7565 584.784 68.8424 cv
584.756 68.9283 584.613 69.1561 584.613 69.1561 cv
584.613 69.1561 584.27 69.2416 584.214 69.2135 cv
cp
@
583.586 66.8737 mo
583.3 67.0455 li
582.901 67.2447 li
582.331 67.5873 li
581.903 67.8729 li
581.532 68.1295 li
581.532 68.1295 581.529 68.1655 581.332 68.2428 cv
581.054 68.3522 580.931 68.3998 580.931 68.3998 cv
580.857 68.4276 580.761 68.2428 580.819 68.1862 cv
580.875 68.1295 581.104 67.9291 581.104 67.9291 cv
581.475 67.7584 li
581.96 67.3588 li
582.331 67.074 li
582.702 66.8737 li
583.015 66.6459 li
583.272 66.5033 li
583.472 66.4174 li
583.643 66.1889 li
583.672 65.819 li
583.415 65.7897 li
583.158 65.8756 li
582.673 66.2174 li
582.016 66.6166 li
581.675 66.8737 li
581.418 67.074 li
581.418 67.074 581.161 67.2162 581.076 67.2162 cv
580.99 67.2162 580.847 67.2408 580.791 67.2447 cv
580.595 67.2592 580.591 67.1022 580.591 67.1022 cv
580.642 66.9596 580.875 66.8451 580.875 66.8451 cv
581.759 66.3893 li
582.188 66.0463 li
582.543 65.8053 li
582.901 65.5619 li
583.244 65.476 li
583.5 65.4186 li
583.643 65.4479 li
583.872 65.9322 li
583.872 66.3893 li
583.586 66.8737 li
f
583.586 66.8737 mo
583.3 67.0455 li
582.901 67.2447 li
582.331 67.5873 li
581.903 67.8729 li
581.532 68.1295 li
581.532 68.1295 581.529 68.1655 581.332 68.2428 cv
581.054 68.3522 580.931 68.3998 580.931 68.3998 cv
580.857 68.4276 580.761 68.2428 580.819 68.1862 cv
580.875 68.1295 581.104 67.9291 581.104 67.9291 cv
581.475 67.7584 li
581.96 67.3588 li
582.331 67.074 li
582.702 66.8737 li
583.015 66.6459 li
583.272 66.5033 li
583.472 66.4174 li
583.643 66.1889 li
583.672 65.819 li
583.415 65.7897 li
583.158 65.8756 li
582.673 66.2174 li
582.016 66.6166 li
581.675 66.8737 li
581.418 67.074 li
581.418 67.074 581.161 67.2162 581.076 67.2162 cv
580.99 67.2162 580.847 67.2408 580.791 67.2447 cv
580.595 67.2592 580.591 67.1022 580.591 67.1022 cv
580.642 66.9596 580.875 66.8451 580.875 66.8451 cv
581.759 66.3893 li
582.188 66.0463 li
582.543 65.8053 li
582.901 65.5619 li
583.244 65.476 li
583.5 65.4186 li
583.643 65.4479 li
583.872 65.9322 li
583.872 66.3893 li
583.586 66.8737 li
cp
@
583.586 64.2947 mo
583.129 64.5912 li
582.644 64.8483 li
582.188 65.0768 li
581.903 65.3053 li
581.504 65.5326 li
581.189 65.7045 li
580.932 65.819 li
580.648 65.9322 li
580.648 65.9322 580.533 65.9037 580.562 65.8471 cv
580.591 65.7897 580.675 65.6471 580.675 65.6471 cv
580.675 65.6471 581.018 65.5045 581.048 65.4479 cv
581.076 65.3905 581.447 65.2479 581.475 65.1908 cv
581.504 65.1334 581.759 64.9061 581.759 64.9061 cv
581.759 64.9061 581.96 64.7916 582.102 64.7338 cv
582.245 64.6776 582.531 64.449 582.531 64.449 cv
582.531 64.449 582.873 64.2947 582.901 64.2369 cv
582.929 64.1803 582.959 64.1237 583.044 64.0377 cv
583.129 63.9518 583.272 63.8666 583.272 63.8666 cv
583.272 63.8666 583.443 63.8092 583.5 63.8951 cv
583.557 63.9799 583.643 64.0658 583.643 64.0658 cv
583.586 64.2947 li
f
583.586 64.2947 mo
583.129 64.5912 li
582.644 64.8483 li
582.188 65.0768 li
581.903 65.3053 li
581.504 65.5326 li
581.189 65.7045 li
580.932 65.819 li
580.648 65.9322 li
580.648 65.9322 580.533 65.9037 580.562 65.8471 cv
580.591 65.7897 580.675 65.6471 580.675 65.6471 cv
580.675 65.6471 581.018 65.5045 581.048 65.4479 cv
581.076 65.3905 581.447 65.2479 581.475 65.1908 cv
581.504 65.1334 581.759 64.9061 581.759 64.9061 cv
581.759 64.9061 581.96 64.7916 582.102 64.7338 cv
582.245 64.6776 582.531 64.449 582.531 64.449 cv
582.531 64.449 582.873 64.2947 582.901 64.2369 cv
582.929 64.1803 582.959 64.1237 583.044 64.0377 cv
583.129 63.9518 583.272 63.8666 583.272 63.8666 cv
583.272 63.8666 583.443 63.8092 583.5 63.8951 cv
583.557 63.9799 583.643 64.0658 583.643 64.0658 cv
583.586 64.2947 li
cp
@
597.153 63.6686 mo
596.873 63.8092 li
596.507 64.0053 li
596.199 64.1737 li
595.943 64.3139 li
595.607 64.5131 li
595.298 64.6256 li
594.905 64.7936 li
594.596 64.8776 li
594.261 64.9901 li
594.261 64.9901 594.12 65.1022 594.063 64.9901 cv
594.007 64.8776 594.007 64.8217 594.007 64.8217 cv
594.007 64.8217 594.12 64.7377 594.204 64.7096 cv
594.288 64.6815 594.709 64.4569 594.709 64.4569 cv
595.354 64.1178 li
595.888 63.8092 li
596.311 63.5846 li
596.62 63.3881 li
596.9 63.276 li
597.153 63.3881 li
597.153 63.6686 li
f
597.153 63.6686 mo
596.873 63.8092 li
596.507 64.0053 li
596.199 64.1737 li
595.943 64.3139 li
595.607 64.5131 li
595.298 64.6256 li
594.905 64.7936 li
594.596 64.8776 li
594.261 64.9901 li
594.261 64.9901 594.12 65.1022 594.063 64.9901 cv
594.007 64.8776 594.007 64.8217 594.007 64.8217 cv
594.007 64.8217 594.12 64.7377 594.204 64.7096 cv
594.288 64.6815 594.709 64.4569 594.709 64.4569 cv
595.354 64.1178 li
595.888 63.8092 li
596.311 63.5846 li
596.62 63.3881 li
596.9 63.276 li
597.153 63.3881 li
597.153 63.6686 li
cp
@
596.816 62.4623 mo
596.563 62.5182 li
596.142 62.7987 li
595.72 63.0514 li
595.242 63.4166 li
594.849 63.6127 li
593.923 64.0897 li
593.166 64.401 li
592.884 64.5971 li
592.465 64.7096 li
592.24 64.6256 li
592.465 64.3729 li
592.829 64.2018 li
593.811 63.6967 li
594.429 63.36 li
595.466 62.7147 li
596.367 62.1256 li
596.62 61.9569 li
596.788 62.0971 li
596.816 62.4623 li
f
596.816 62.4623 mo
596.563 62.5182 li
596.142 62.7987 li
595.72 63.0514 li
595.242 63.4166 li
594.849 63.6127 li
593.923 64.0897 li
593.166 64.401 li
592.884 64.5971 li
592.465 64.7096 li
592.24 64.6256 li
592.465 64.3729 li
592.829 64.2018 li
593.811 63.6967 li
594.429 63.36 li
595.466 62.7147 li
596.367 62.1256 li
596.62 61.9569 li
596.788 62.0971 li
596.816 62.4623 li
cp
@
596.675 61.4518 mo
596.311 61.4518 li
596.056 61.6764 li
595.748 61.9569 li
595.466 62.1537 li
595.046 62.4061 li
594.457 62.7428 li
593.84 63.0514 li
593.25 63.3041 li
592.492 63.6405 li
591.931 63.8932 li
591.37 64.1178 li
591.117 64.1737 li
590.976 64.0338 li
591.061 63.8365 li
591.509 63.6405 li
592.071 63.444 li
593.138 62.9108 li
594.204 62.3776 li
594.99 61.8729 li
595.523 61.5639 li
595.775 61.3959 li
596.028 61.2553 li
596.367 61.0026 li
596.648 60.9467 li
596.675 61.4518 li
f
596.675 61.4518 mo
596.311 61.4518 li
596.056 61.6764 li
595.748 61.9569 li
595.466 62.1537 li
595.046 62.4061 li
594.457 62.7428 li
593.84 63.0514 li
593.25 63.3041 li
592.492 63.6405 li
591.931 63.8932 li
591.37 64.1178 li
591.117 64.1737 li
590.976 64.0338 li
591.061 63.8365 li
591.509 63.6405 li
592.071 63.444 li
593.138 62.9108 li
594.204 62.3776 li
594.99 61.8729 li
595.523 61.5639 li
595.775 61.3959 li
596.028 61.2553 li
596.367 61.0026 li
596.648 60.9467 li
596.675 61.4518 li
cp
@
596.452 60.2455 mo
595.971 60.358 li
595.663 60.4979 li
595.129 60.8065 li
594.484 61.1998 li
593.727 61.6483 li
592.913 62.0416 li
592.351 62.3502 li
591.623 62.7147 li
591.145 62.9389 li
590.528 63.1635 li
590.136 63.3319 li
589.742 63.444 li
589.321 63.4721 li
588.984 63.5006 li
588.704 63.444 li
588.788 63.276 li
588.788 63.276 588.984 63.192 589.125 63.1635 cv
589.265 63.1354 589.939 62.9955 589.939 62.9955 cv
590.976 62.6588 li
591.791 62.2662 li
592.941 61.5924 li
594.148 60.9186 li
594.794 60.5819 li
595.41 60.2174 li
595.41 60.2174 595.691 60.0494 595.748 60.0209 cv
595.804 59.9928 595.916 59.8803 595.943 59.8248 cv
595.971 59.7682 596.056 59.4596 596.056 59.4596 cv
596.254 59.6002 li
596.395 59.8803 li
596.452 60.2455 li
f
596.452 60.2455 mo
595.971 60.358 li
595.663 60.4979 li
595.129 60.8065 li
594.484 61.1998 li
593.727 61.6483 li
592.913 62.0416 li
592.351 62.3502 li
591.623 62.7147 li
591.145 62.9389 li
590.528 63.1635 li
590.136 63.3319 li
589.742 63.444 li
589.321 63.4721 li
588.984 63.5006 li
588.704 63.444 li
588.788 63.276 li
588.788 63.276 588.984 63.192 589.125 63.1635 cv
589.265 63.1354 589.939 62.9955 589.939 62.9955 cv
590.976 62.6588 li
591.791 62.2662 li
592.941 61.5924 li
594.148 60.9186 li
594.794 60.5819 li
595.41 60.2174 li
595.41 60.2174 595.691 60.0494 595.748 60.0209 cv
595.804 59.9928 595.916 59.8803 595.943 59.8248 cv
595.971 59.7682 596.056 59.4596 596.056 59.4596 cv
596.254 59.6002 li
596.395 59.8803 li
596.452 60.2455 li
cp
@
584.013 68.0436 mo
583.672 68.1002 li
583.415 68.2721 li
582.959 68.5287 li
582.616 68.7565 li
582.273 68.985 li
581.931 69.1561 li
581.789 69.2987 li
581.504 69.5272 li
581.275 69.6979 li
581.275 69.6979 581.048 69.7838 580.99 69.7838 cv
580.932 69.7838 580.791 69.7553 580.791 69.7553 cv
580.791 69.7553 580.791 69.5834 580.847 69.5553 cv
580.904 69.5272 581.161 69.328 581.161 69.328 cv
581.532 69.099 li
581.845 68.8424 li
582.102 68.642 li
582.445 68.4147 li
582.816 68.2147 li
583.101 67.9869 li
583.272 67.8729 li
583.443 67.7584 li
583.615 67.6158 li
583.929 67.7006 li
584.099 67.8151 li
584.013 68.0436 li
f
584.013 68.0436 mo
583.672 68.1002 li
583.415 68.2721 li
582.959 68.5287 li
582.616 68.7565 li
582.273 68.985 li
581.931 69.1561 li
581.789 69.2987 li
581.504 69.5272 li
581.275 69.6979 li
581.275 69.6979 581.048 69.7838 580.99 69.7838 cv
580.932 69.7838 580.791 69.7553 580.791 69.7553 cv
580.791 69.7553 580.791 69.5834 580.847 69.5553 cv
580.904 69.5272 581.161 69.328 581.161 69.328 cv
581.532 69.099 li
581.845 68.8424 li
582.102 68.642 li
582.445 68.4147 li
582.816 68.2147 li
583.101 67.9869 li
583.272 67.8729 li
583.443 67.7584 li
583.615 67.6158 li
583.929 67.7006 li
584.099 67.8151 li
584.013 68.0436 li
cp
@
584.013 68.0436 mo
583.672 68.1002 li
583.415 68.2721 li
582.959 68.5287 li
582.616 68.7565 li
582.273 68.985 li
581.931 69.1561 li
581.789 69.2987 li
581.504 69.5272 li
581.275 69.6979 li
581.275 69.6979 581.035 69.7975 580.978 69.8065 cv
580.791 69.8373 580.791 69.5834 580.847 69.5553 cv
580.904 69.5272 581.161 69.328 581.161 69.328 cv
581.532 69.099 li
581.845 68.8424 li
582.102 68.642 li
582.445 68.4147 li
582.816 68.2147 li
583.101 67.9869 li
583.272 67.8729 li
583.443 67.7584 li
583.615 67.6158 li
583.929 67.7006 li
584.099 67.8151 li
584.013 68.0436 li
f
584.013 68.0436 mo
583.672 68.1002 li
583.415 68.2721 li
582.959 68.5287 li
582.616 68.7565 li
582.273 68.985 li
581.931 69.1561 li
581.789 69.2987 li
581.504 69.5272 li
581.275 69.6979 li
581.275 69.6979 581.035 69.7975 580.978 69.8065 cv
580.791 69.8373 580.791 69.5834 580.847 69.5553 cv
580.904 69.5272 581.161 69.328 581.161 69.328 cv
581.532 69.099 li
581.845 68.8424 li
582.102 68.642 li
582.445 68.4147 li
582.816 68.2147 li
583.101 67.9869 li
583.272 67.8729 li
583.443 67.7584 li
583.615 67.6158 li
583.929 67.7006 li
584.099 67.8151 li
584.013 68.0436 li
cp
@
582.013 89.8944 mo
582.159 89.6752 li
582.312 89.3951 li
582.491 89.2416 li
582.644 89.0885 li
582.75 88.7865 li
582.795 88.7623 582.491 88.8842 582.491 88.8842 cv
582.21 89.0115 li
582.032 89.1393 li
581.824 89.2709 li
581.692 90.0272 li
582.013 89.8944 li
f
0 lw
582.013 89.8944 mo
582.159 89.6752 li
582.312 89.3951 li
582.491 89.2416 li
582.644 89.0885 li
582.75 88.7865 li
582.795 88.7623 582.491 88.8842 582.491 88.8842 cv
582.21 89.0115 li
582.032 89.1393 li
581.824 89.2709 li
581.692 90.0272 li
582.013 89.8944 li
cp
@
552.853 104.072 mo
553.275 103.755 553.363 103.132 553.045 102.71 cv
552.718 102.275 552.104 102.201 551.682 102.518 cv
551.248 102.845 551.164 103.446 551.491 103.88 cv
551.809 104.303 552.419 104.4 552.853 104.072 cv
f
561.651 115.82 mo
561.197 115.438 li
560.476 116.296 li
557.116 113.478 li
564.993 111.478 li
565.226 111.2 li
560.742 107.438 li
560.955 107.185 li
560.5 106.803 li
559.312 108.219 li
559.767 108.6 li
560.318 107.943 li
563.476 110.592 li
555.614 112.626 li
555.391 112.891 li
560.507 117.183 li
561.651 115.82 li
f
575.733 117.595 mo
572.834 115.989 li
572.515 116.566 li
573.595 117.165 li
571.597 120.77 li
570.95 121.938 569.708 122.344 568.627 121.744 cv
567.574 121.16 567.314 119.961 567.97 118.778 cv
569.976 115.159 li
571.072 115.766 li
571.392 115.189 li
568.119 113.374 li
567.798 113.952 li
568.895 114.559 li
566.72 118.482 li
565.97 119.837 566.543 121.456 568.086 122.311 cv
569.729 123.222 571.446 122.779 572.309 121.221 cv
574.332 117.573 li
575.413 118.173 li
575.733 117.595 li
f
583.589 128.055 mo
585.108 128.434 586.164 127.95 586.47 126.719 cv
586.769 125.518 586.069 124.579 584.546 124.148 cv
585.714 124.439 586.733 123.962 586.972 123.003 cv
587.252 121.883 586.567 120.948 585.207 120.609 cv
581.304 119.635 li
581.156 120.227 li
582.355 120.527 li
580.808 126.734 li
579.608 126.434 li
579.461 127.026 li
583.589 128.055 li
cp
582.754 124.109 mo
583.906 124.396 li
584.962 124.66 585.362 125.303 585.115 126.296 cv
584.888 127.207 584.228 127.536 583.172 127.272 cv
582.036 126.989 li
582.754 124.109 li
cp
583.56 120.878 mo
584.695 121.161 li
585.479 121.356 585.784 121.908 585.584 122.708 cv
585.381 123.524 584.737 123.924 583.937 123.724 cv
582.914 123.469 li
583.56 120.878 li
ef
597.912 128.038 mo
597.302 128.017 li
597.272 128.89 li
594.471 128.792 li
594.572 125.909 li
596.681 125.982 li
596.652 126.806 li
597.261 126.828 li
597.341 124.538 li
596.731 124.533 li
596.704 125.324 li
594.595 125.249 li
594.691 122.498 li
597.393 122.592 li
597.363 123.449 li
597.957 123.47 li
598.021 121.624 li
597.411 121.603 li
597.4 121.932 li
592.225 121.751 li
592.205 122.362 li
593.44 122.405 li
593.216 128.799 li
591.981 128.755 li
591.96 129.365 li
597.859 129.571 li
597.912 128.038 li
f
611.168 127.448 mo
610.712 127.52 li
610.353 127.577 610.013 127.43 609.672 127.067 cv
607.806 125.092 li
608.85 124.726 609.391 123.823 609.218 122.732 cv
609.009 121.413 608.052 120.846 606.472 121.096 cv
602.629 121.706 li
602.732 122.357 li
603.954 122.163 li
604.947 128.433 li
603.725 128.626 li
603.82 129.229 li
607.502 128.646 li
607.406 128.044 li
606.184 128.237 li
605.757 125.534 li
606.554 125.407 li
608.712 127.753 li
609.216 128.307 609.357 128.352 610.074 128.239 cv
611.263 128.05 li
611.168 127.448 li
cp
605.191 121.967 mo
606.332 121.786 li
607.177 121.653 607.714 122.086 607.858 122.998 cv
608 123.893 607.591 124.576 606.809 124.699 cv
605.653 124.882 li
605.191 121.967 li
ef
621.195 122.755 mo
620.64 122.967 li
621 123.907 li
618.415 124.899 li
616.158 119.019 li
617.312 118.576 li
617.076 117.961 li
613.597 119.296 li
613.834 119.911 li
614.988 119.469 li
617.263 125.394 li
616.108 125.837 li
616.327 126.407 li
621.791 124.309 li
621.195 122.755 li
f
628.836 119.698 mo
627.775 120.335 li
624.506 114.894 li
625.566 114.257 li
625.226 113.692 li
622.032 115.611 li
622.372 116.176 li
623.431 115.538 li
626.701 120.98 li
625.641 121.617 li
625.956 122.14 li
629.15 120.22 li
628.836 119.698 li
f
635.108 106.542 mo
636.013 105.699 li
635.563 105.216 li
633.138 107.476 li
633.589 107.958 li
634.506 107.104 li
637.721 110.553 li
630.666 109.782 li
629.111 111.232 li
629.561 111.715 li
630.405 110.928 li
630.939 111.016 li
634.976 115.344 li
634.072 116.188 li
634.488 116.634 li
636.912 114.374 li
636.495 113.928 li
635.579 114.783 li
632.261 111.225 li
639.582 112.064 li
639.943 111.727 li
635.108 106.542 li
f
642.602 102.171 mo
642.175 101.861 641.554 101.958 641.244 102.387 cv
640.923 102.826 641.032 103.434 641.459 103.745 cv
641.899 104.064 642.498 103.969 642.817 103.53 cv
643.128 103.102 643.043 102.49 642.602 102.171 cv
f
546.72 86.9467 mo
547.223 88.0768 li
541.379 90.6791 li
540.877 89.5494 li
540.319 89.7975 li
541.834 93.2018 li
542.392 92.9537 li
541.896 91.8385 li
544.471 90.692 li
546.302 94.8041 li
543.726 95.9506 li
543.224 94.8209 li
542.666 95.069 li
544.182 98.4733 li
544.739 98.2252 li
544.236 97.0951 li
550.081 94.494 li
550.584 95.6229 li
551.141 95.3744 li
549.625 91.9713 li
549.068 92.2194 li
549.571 93.3483 li
546.905 94.5358 li
545.074 90.4237 li
547.74 89.2369 li
548.236 90.351 li
548.794 90.103 li
547.278 86.699 li
546.72 86.9467 li
f
537.238 74.7006 mo
537.757 77.974 li
538.408 77.8705 li
538.215 76.6498 li
542.286 76.0045 li
543.605 75.7955 544.689 76.526 544.882 77.7467 cv
545.071 78.9362 544.285 79.8783 542.95 80.0897 cv
538.862 80.7369 li
538.666 79.4994 li
538.015 79.6022 li
538.6 83.2994 li
539.252 83.1959 li
539.055 81.9584 li
543.485 81.2565 li
545.016 81.0143 545.939 79.5658 545.663 77.824 cv
545.369 75.9674 543.963 74.8881 542.204 75.1666 cv
538.083 75.819 li
537.89 74.5983 li
537.238 74.7006 li
f
545.212 58.6705 mo
545.061 59.8983 li
538.761 59.1244 li
538.911 57.8971 li
538.257 57.817 li
537.943 60.3697 li
543.151 63.683 li
537.302 65.5905 li
537 68.0447 li
537.655 68.1256 li
537.806 66.8983 li
544.106 67.6713 li
543.956 68.899 li
544.561 68.9733 li
544.966 65.6842 li
544.359 65.6088 li
544.209 66.8365 li
539.07 66.2057 li
545.265 64.192 li
539.442 60.4701 li
544.908 61.142 li
544.757 62.3697 li
545.363 62.444 li
545.817 58.7447 li
545.212 58.6705 li
f
548.734 50.0072 mo
549.296 48.5455 548.943 47.4389 547.757 46.9838 cv
546.603 46.5405 545.586 47.1217 544.972 48.5819 cv
545.404 47.4576 545.055 46.3881 544.132 46.0338 cv
543.054 45.6197 542.043 46.1854 541.54 47.494 cv
540.098 51.2494 li
540.668 51.4674 li
541.111 50.3131 li
547.084 52.6061 li
546.64 53.7604 li
547.209 53.9791 li
548.734 50.0072 li
cp
544.716 50.3549 mo
545.141 49.2467 li
545.531 48.2299 546.218 47.9115 547.173 48.278 cv
548.05 48.6151 548.296 49.3092 547.906 50.3256 cv
547.486 51.4186 li
544.716 50.3549 li
cp
541.606 49.1615 mo
542.025 48.0678 li
542.315 47.3139 542.9 47.0795 543.67 47.3744 cv
544.455 47.6764 544.773 48.3639 544.478 49.1334 cv
544.099 50.119 li
541.606 49.1615 li
ef
554.065 40.6342 mo
555.257 38.9322 554.757 36.369 552.988 35.13 cv
551.245 33.91 548.679 34.327 547.487 36.0287 cv
546.277 37.7572 546.749 40.3026 548.504 41.5319 cv
550.288 42.7799 552.854 42.3627 554.065 40.6342 cv
cp
548.045 36.4389 mo
548.84 35.305 550.684 35.228 552.197 36.2877 cv
553.723 37.3561 554.291 39.1022 553.488 40.2506 cv
552.694 41.3854 550.845 41.4389 549.318 40.3697 cv
547.819 39.3209 547.25 37.574 548.045 36.4389 cv
ef
562.275 28.583 mo
561.848 28.996 li
562.547 29.719 li
560.554 31.643 li
556.179 27.113 li
557.069 26.253 li
556.61 25.779 li
553.931 28.368 li
554.388 28.842 li
555.278 27.983 li
559.687 32.549 li
558.798 33.409 li
559.221 33.847 li
563.432 29.781 li
562.275 28.583 li
f
566.155 27.553 mo
569.47 25.482 li
571.398 24.276 571.988 21.983 570.835 20.137 cv
569.707 18.333 567.334 17.833 565.432 19.022 cv
562.118 21.092 li
562.441 21.61 li
563.49 20.955 li
566.881 26.38 li
565.832 27.036 li
566.155 27.553 li
cp
567.916 25.674 mo
564.579 20.333 li
565.684 19.642 li
566.97 18.838 568.697 19.393 569.64 20.903 cv
570.584 22.413 570.308 24.18 569.007 24.993 cv
567.916 25.674 li
ef
581.308 19.433 mo
579.983 19.89 li
577.916 13.888 li
580.193 13.104 li
580.493 13.977 li
581.07 13.779 li
580.447 11.97 li
579.871 12.17 li
579.977 12.481 li
574.241 14.456 li
574.133 14.144 li
573.572 14.337 li
574.195 16.146 li
574.756 15.953 li
574.456 15.08 li
576.731 14.296 li
578.798 20.297 li
577.473 20.755 li
577.672 21.331 li
581.507 20.01 li
581.308 19.433 li
f
588.124 13.915 mo
585.032 14.517 li
585.271 15.747 li
588.363 15.146 li
588.124 13.915 li
f
602.05 10.108 mo
598.737 10.05 li
598.725 10.71 li
599.962 10.731 li
599.89 14.853 li
599.867 16.188 598.96 17.128 597.723 17.107 cv
596.519 17.086 595.728 16.149 595.752 14.796 cv
595.824 10.659 li
597.077 10.681 li
597.088 10.021 li
593.346 9.95601 li
593.335 10.616 li
594.588 10.637 li
594.509 15.122 li
594.482 16.671 595.748 17.831 597.513 17.862 cv
599.391 17.895 600.699 16.697 600.73 14.917 cv
600.802 10.746 li
602.039 10.767 li
602.05 10.108 li
f
615.513 13.505 mo
616.707 13.826 li
616.878 13.189 li
613.675 12.332 li
613.506 12.969 li
614.716 13.292 li
613.496 17.847 li
610.412 11.457 li
608.357 10.906 li
608.186 11.542 li
609.302 11.841 li
609.508 12.34 li
607.976 18.058 li
606.782 17.738 li
606.624 18.328 li
609.826 19.185 li
609.983 18.596 li
608.773 18.272 li
610.032 13.574 li
613.199 20.226 li
613.677 20.354 li
615.513 13.505 li
f
622.853 23.703 mo
621.761 23.122 li
624.741 17.517 li
625.833 18.097 li
626.142 17.515 li
622.852 15.766 li
622.543 16.348 li
623.634 16.928 li
620.654 22.534 li
619.562 21.953 li
619.276 22.492 li
622.566 24.241 li
622.853 23.703 li
f
635.158 24.395 mo
635.711 24.812 li
636.108 24.285 li
634.199 22.846 li
633.802 23.373 li
634.552 23.938 li
629.827 26.756 li
631.195 21.408 li
632.024 22.033 li
632.422 21.506 li
629.867 19.582 li
629.47 20.108 li
630.115 20.594 li
628.179 28.095 li
628.495 28.333 li
635.158 24.395 li
f
639.371 36.4369 mo
638.963 35.983 li
638.313 36.5678 li
636.438 34.485 li
638.582 32.554 li
639.994 34.123 li
639.382 34.674 li
639.79 35.128 li
641.493 33.594 li
641.072 33.152 li
640.485 33.681 li
639.072 32.113 li
641.119 30.27 li
642.929 32.28 li
642.291 32.854 li
642.688 33.295 li
644.06 32.059 li
643.652 31.606 li
643.407 31.827 li
639.943 27.979 li
639.49 28.387 li
640.317 29.306 li
635.563 33.587 li
634.735 32.667 li
634.282 33.076 li
638.232 37.4623 li
639.371 36.4369 li
f
645.235 47.7057 mo
645.011 47.3014 li
644.836 46.9838 644.857 46.6151 645.082 46.1697 cv
646.3 43.7408 li
647 44.5971 648.034 44.7963 649 44.2615 cv
650.169 43.6139 650.373 42.5201 649.597 41.1217 cv
647.711 37.7186 li
647.134 38.0377 li
647.734 39.1197 li
642.181 42.1967 li
641.582 41.1151 li
641.048 41.4108 li
642.855 44.6697 li
643.388 44.3744 li
642.789 43.2924 li
645.183 41.9655 li
645.575 42.6725 li
644.108 45.5026 li
643.761 46.1666 643.766 46.3139 644.118 46.949 cv
644.702 48.0006 li
645.235 47.7057 li
cp
648.341 40.2155 mo
648.901 41.224 li
649.316 41.974 649.093 42.6264 648.286 43.074 cv
647.493 43.5131 646.711 43.3619 646.328 42.6697 cv
645.759 41.6459 li
648.341 40.2155 li
ef
646.641 52.2037 mo
646.495 52.9276 646.506 53.5475 646.7 54.1432 cv
647.123 55.4447 648.332 56.1264 649.508 55.7447 cv
650.528 55.4135 650.907 54.8737 651.221 53.2811 cv
651.302 52.8905 651.4 52.4428 651.503 51.9584 cv
651.643 51.324 651.806 51.0795 652.215 50.9467 cv
652.857 50.7377 653.423 51.0924 653.663 51.8287 cv
653.8 52.2526 653.813 52.5604 653.682 53.2787 cv
652.898 53.5338 li
653.088 54.1139 li
654.968 53.5026 li
654.78 52.9225 li
654.388 53.0494 li
654.492 52.5131 654.454 52.0233 654.285 51.5053 cv
653.878 50.2506 652.663 49.5533 651.534 49.9205 cv
650.609 50.2201 650.213 50.8697 649.971 52.4733 cv
649.735 53.9889 649.466 54.5447 648.87 54.7389 cv
648.257 54.9369 647.636 54.5155 647.381 53.7311 cv
647.207 53.1979 647.206 52.7135 647.379 51.9635 cv
648.194 51.699 li
648.006 51.119 li
646.046 51.7553 li
646.234 52.3358 li
646.641 52.2037 li
f
649.728 64.4428 mo
649.556 63.2186 li
655.843 62.3346 li
656.013 63.5592 li
656.668 63.4674 li
656.148 59.7772 li
655.496 59.869 li
655.668 61.0936 li
649.382 61.9772 li
649.21 60.7526 li
648.605 60.8373 li
649.124 64.528 li
649.728 64.4428 li
f
649.856 74.0846 mo
649.905 72.6842 li
656.25 72.9061 li
656.166 75.3119 li
655.243 75.2787 li
655.221 75.8893 li
657.132 75.9557 li
657.154 75.3463 li
656.824 75.3346 li
657.037 69.2709 li
657.366 69.2826 li
657.386 68.6889 li
655.475 68.6229 li
655.455 69.2162 li
656.377 69.2487 li
656.294 71.6537 li
649.949 71.4322 li
649.998 70.0319 li
649.388 70.0104 li
649.247 74.0639 li
649.856 74.0846 li
f
647.455 86.3893 mo
647.627 85.7018 li
655.4 84.5131 li
655.504 84.0971 li
649.23 79.2701 li
649.382 78.6627 li
648.79 78.5143 li
648.231 80.7545 li
648.824 80.9022 li
649.047 80.0065 li
650.603 81.1928 li
649.878 84.1041 li
647.954 84.3893 li
648.129 83.6854 li
647.537 83.5377 li
646.867 86.226 li
647.455 86.3893 li
cp
656.661 87.0194 mo
657.109 87.1315 657.569 86.8549 657.677 86.4237 cv
657.788 85.9752 657.513 85.5155 657.064 85.4037 cv
656.632 85.2963 656.173 85.5717 656.06 86.0201 cv
655.953 86.4518 656.229 86.9115 656.661 87.0194 cv
cp
657.367 84.1881 mo
657.815 84.2994 658.275 84.0233 658.382 83.5912 cv
658.494 83.1432 658.218 82.6842 657.77 82.5717 cv
657.338 82.4647 656.879 82.7408 656.767 83.1881 cv
656.659 83.6205 656.935 84.0795 657.367 84.1881 cv
cp
651.159 81.6205 mo
653.672 83.5385 li
650.565 84.0033 li
651.159 81.6205 li
ef
644.016 94.3795 mo
644.608 93.1088 li
650.361 95.7924 li
649.345 97.974 li
648.507 97.5834 li
648.25 98.1365 li
649.983 98.9447 li
650.241 98.392 li
649.942 98.2526 li
652.507 92.7533 li
652.806 92.8932 li
653.056 92.3549 li
651.322 91.5463 li
651.072 92.0846 li
651.909 92.4752 li
650.891 94.6569 li
645.138 91.974 li
645.73 90.7037 li
645.177 90.4459 li
643.463 94.1217 li
644.016 94.3795 li
f
19.4032 74.5526 mo
17.4743 74.5526 li
17.4743 64.5768 li
19.4032 64.5768 li
19.4032 63.6256 li
13.5922 63.6256 li
13.5922 64.5768 li
15.495 64.5768 li
15.495 68.9733 li
8.47623 68.9733 li
8.47623 64.5768 li
10.404 64.5768 li
10.404 63.6256 li
4.59341 63.6256 li
4.59341 64.5768 li
6.52193 64.5768 li
6.52193 74.5526 li
4.59341 74.5526 li
4.59341 75.5045 li
10.404 75.5045 li
10.404 74.5526 li
8.47623 74.5526 li
8.47623 70.0026 li
15.495 70.0026 li
15.495 74.5526 li
13.5922 74.5526 li
13.5922 75.5045 li
19.4032 75.5045 li
19.4032 74.5526 li
f
40.1247 63.6256 mo
34.9567 63.6256 li
34.9567 64.6537 li
36.8844 64.6537 li
36.8844 71.0819 li
36.8844 73.1647 35.4965 74.6561 33.568 74.6561 cv
31.6911 74.6561 30.4313 73.2155 30.4313 71.1072 cv
30.4313 64.6537 li
32.3856 64.6537 li
32.3856 63.6256 li
26.5485 63.6256 li
26.5485 64.6537 li
28.5028 64.6537 li
28.5028 71.6471 li
28.5028 74.0639 30.5083 75.8385 33.2594 75.8385 cv
36.1903 75.8385 38.1958 73.9354 38.1958 71.1588 cv
38.1958 64.6537 li
40.1247 64.6537 li
40.1247 63.6256 li
f
63.027 74.5526 mo
61.0985 74.5526 li
61.0985 64.6537 li
63.027 64.6537 li
63.027 63.6256 li
59.0165 63.6256 li
54.8766 72.3158 li
50.8141 63.6256 li
46.9579 63.6256 li
46.9579 64.6537 li
48.8856 64.6537 li
48.8856 74.5526 li
46.9579 74.5526 li
46.9579 75.5045 li
52.1254 75.5045 li
52.1254 74.5526 li
50.1969 74.5526 li
50.1969 66.4799 li
54.4911 75.6842 li
59.1442 65.9655 li
59.1442 74.5526 li
57.2165 74.5526 li
57.2165 75.5045 li
63.027 75.5045 li
63.027 74.5526 li
f
77.2418 75.5045 mo
79.684 75.5045 81.0985 74.3729 81.0985 72.3932 cv
81.0985 70.4647 79.684 69.308 77.2157 69.2311 cv
79.0922 69.2311 80.4555 68.1256 80.4555 66.5826 cv
80.4555 64.7826 79.0668 63.6256 76.8817 63.6256 cv
70.6083 63.6256 li
70.6083 64.5768 li
72.5368 64.5768 li
72.5368 74.5526 li
70.6083 74.5526 li
70.6083 75.5045 li
77.2418 75.5045 li
cp
74.4911 69.8483 mo
76.3415 69.8483 li
78.0387 69.8483 78.8875 70.6705 78.8875 72.2643 cv
78.8875 73.7299 78.0125 74.4752 76.3161 74.4752 cv
74.4911 74.4752 li
74.4911 69.8483 li
cp
74.4911 64.6537 mo
76.3161 64.6537 li
77.5758 64.6537 78.2438 65.3737 78.2438 66.6596 cv
78.2438 67.9713 77.4215 68.819 76.1364 68.819 cv
74.4911 68.819 li
74.4911 64.6537 li
ef
93.9247 75.8385 mo
97.1649 75.8385 99.9926 72.9069 99.9926 69.5397 cv
99.9926 66.2221 97.1649 63.317 93.9247 63.317 cv
90.6333 63.317 87.8051 66.1967 87.8051 69.5397 cv
87.8051 72.933 90.6333 75.8385 93.9247 75.8385 cv
cp
93.8993 64.3971 mo
96.059 64.3971 97.8075 66.6854 97.8075 69.5651 cv
97.8075 72.4701 96.0844 74.7584 93.8993 74.7584 cv
91.7399 74.7584 90.0172 72.444 90.0172 69.5397 cv
90.0172 66.6854 91.7399 64.3971 93.8993 64.3971 cv
ef
116.265 72.9069 mo
115.338 72.9069 li
115.338 74.4752 li
111.019 74.4752 li
111.019 64.6537 li
112.948 64.6537 li
112.948 63.6256 li
107.138 63.6256 li
107.138 64.6537 li
109.065 64.6537 li
109.065 74.5526 li
107.138 74.5526 li
107.138 75.5045 li
116.265 75.5045 li
116.265 72.9069 li
f
122.121 75.5045 mo
128.215 75.5045 li
131.763 75.5045 134.437 72.9584 134.437 69.5651 cv
134.437 66.2487 131.712 63.6256 128.215 63.6256 cv
122.121 63.6256 li
122.121 64.5768 li
124.05 64.5768 li
124.05 74.5526 li
122.121 74.5526 li
122.121 75.5045 li
cp
126.004 74.4752 mo
126.004 64.6537 li
128.035 64.6537 li
130.4 64.6537 132.225 66.8139 132.225 69.5905 cv
132.225 72.3666 130.4 74.4752 128.008 74.4752 cv
126.004 74.4752 li
ef
148.728 74.5526 mo
146.543 74.5526 li
146.543 64.6537 li
150.297 64.6537 li
150.297 66.0944 li
151.248 66.0944 li
151.248 63.1119 li
150.297 63.1119 li
150.297 63.6256 li
140.834 63.6256 li
140.834 63.1119 li
139.909 63.1119 li
139.909 66.0944 li
140.834 66.0944 li
140.834 64.6537 li
144.588 64.6537 li
144.588 74.5526 li
142.403 74.5526 li
142.403 75.5045 li
148.728 75.5045 li
148.728 74.5526 li
f
161.399 68.6647 mo
156.488 68.6647 li
156.488 70.619 li
161.399 70.619 li
161.399 68.6647 li
f
181.476 63.6256 mo
176.308 63.6256 li
176.308 64.6537 li
178.237 64.6537 li
178.237 71.0819 li
178.237 73.1647 176.848 74.6561 174.92 74.6561 cv
173.043 74.6561 171.783 73.2155 171.783 71.1072 cv
171.783 64.6537 li
173.737 64.6537 li
173.737 63.6256 li
167.901 63.6256 li
167.901 64.6537 li
169.855 64.6537 li
169.855 71.6471 li
169.855 74.0639 171.86 75.8385 174.611 75.8385 cv
177.543 75.8385 179.547 73.9354 179.547 71.1588 cv
179.547 64.6537 li
181.476 64.6537 li
181.476 63.6256 li
f
200.136 64.6537 mo
202.064 64.6537 li
202.064 63.6256 li
196.896 63.6256 li
196.896 64.6537 li
198.85 64.6537 li
198.85 72.0072 li
191.625 63.6256 li
188.309 63.6256 li
188.309 64.6537 li
190.109 64.6537 li
190.624 65.3229 li
190.624 74.5526 li
188.695 74.5526 li
188.695 75.5045 li
193.863 75.5045 li
193.863 74.5526 li
191.909 74.5526 li
191.909 66.9686 li
199.365 75.7096 li
200.136 75.7096 li
200.136 64.6537 li
f
215.146 74.5526 mo
213.218 74.5526 li
213.218 64.6537 li
215.146 64.6537 li
215.146 63.6256 li
209.336 63.6256 li
209.336 64.6537 li
211.265 64.6537 li
211.265 74.5526 li
209.336 74.5526 li
209.336 75.5045 li
215.146 75.5045 li
215.146 74.5526 li
f
231.906 64.6537 mo
232.986 64.6537 li
232.986 63.6256 li
229.257 63.6256 li
229.257 64.6537 li
230.723 64.6537 li
227.484 72.5983 li
224.166 64.6537 li
225.787 64.6537 li
225.787 63.6256 li
220.798 63.6256 li
220.798 64.6537 li
222.058 64.6537 li
226.686 75.8119 li
227.304 75.8119 li
231.906 64.6537 li
f
248.095 73.1127 mo
247.144 73.1127 li
247.144 74.4752 li
242.773 74.4752 li
242.773 69.976 li
246.064 69.976 li
246.064 71.2615 li
247.015 71.2615 li
247.015 67.6881 li
246.064 67.7135 li
246.064 68.9479 li
242.773 68.9479 li
242.773 64.6537 li
246.99 64.6537 li
246.99 65.9908 li
247.916 65.9908 li
247.916 63.1119 li
246.965 63.1119 li
246.965 63.6256 li
238.891 63.6256 li
238.891 64.5768 li
240.819 64.5768 li
240.819 74.5526 li
238.891 74.5526 li
238.891 75.5045 li
248.095 75.5045 li
248.095 73.1127 li
f
267.221 74.5526 mo
266.5 74.5526 li
265.935 74.5526 265.447 74.244 265.009 73.601 cv
262.619 70.1049 li
264.315 69.7963 265.37 68.5365 265.37 66.8139 cv
265.37 64.7311 264.033 63.6256 261.539 63.6256 cv
255.471 63.6256 li
255.471 64.6537 li
257.399 64.6537 li
257.399 74.5526 li
255.471 74.5526 li
255.471 75.5045 li
261.282 75.5045 li
261.282 74.5526 li
259.353 74.5526 li
259.353 70.2846 li
260.613 70.2846 li
263.364 74.4244 li
264.007 75.401 264.213 75.5045 265.345 75.5045 cv
267.221 75.5045 li
267.221 74.5526 li
cp
259.353 64.6537 mo
261.153 64.6537 li
262.49 64.6537 263.209 65.4506 263.209 66.8912 cv
263.209 68.3053 262.413 69.2565 261.179 69.2565 cv
259.353 69.2565 li
259.353 64.6537 li
ef
274.261 74.9901 mo
275.263 75.5553 276.189 75.8385 277.166 75.8385 cv
279.3 75.8385 280.894 74.3729 280.894 72.444 cv
280.894 70.7733 280.277 69.9506 278.066 68.7162 cv
277.526 68.4076 276.909 68.0487 276.24 67.6627 cv
275.366 67.1483 275.084 66.7877 275.084 66.1197 cv
275.084 65.0658 275.881 64.3971 277.088 64.3971 cv
277.783 64.3971 278.246 64.526 279.249 65.0658 cv
279.249 66.351 li
280.2 66.351 li
280.2 63.2662 li
279.249 63.2662 li
279.249 63.9088 li
278.503 63.4967 277.757 63.317 276.909 63.317 cv
274.852 63.317 273.232 64.7826 273.232 66.6334 cv
273.232 68.151 274.004 69.0502 276.266 70.1822 cv
278.4 71.2615 279.095 71.9303 279.095 72.9069 cv
279.095 73.9096 278.169 74.6295 276.883 74.6295 cv
276.009 74.6295 275.289 74.3983 274.261 73.7811 cv
274.261 72.444 li
273.309 72.444 li
273.309 75.6576 li
274.261 75.6576 li
274.261 74.9901 li
f
293.743 74.5526 mo
291.814 74.5526 li
291.814 64.6537 li
293.743 64.6537 li
293.743 63.6256 li
287.932 63.6256 li
287.932 64.6537 li
289.86 64.6537 li
289.86 74.5526 li
287.932 74.5526 li
287.932 75.5045 li
293.743 75.5045 li
293.743 74.5526 li
f
308.213 74.5526 mo
306.028 74.5526 li
306.028 64.6537 li
309.782 64.6537 li
309.782 66.0944 li
310.733 66.0944 li
310.733 63.1119 li
309.782 63.1119 li
309.782 63.6256 li
300.321 63.6256 li
300.321 63.1119 li
299.395 63.1119 li
299.395 66.0944 li
300.321 66.0944 li
300.321 64.6537 li
304.075 64.6537 li
304.075 74.5526 li
301.89 74.5526 li
301.89 75.5045 li
308.213 75.5045 li
308.213 74.5526 li
f
327.236 74.5526 mo
326.131 74.5526 li
321.399 63.2401 li
320.731 63.2401 li
315.795 74.5526 li
314.817 74.5526 li
314.817 75.5045 li
318.416 75.5045 li
318.416 74.5526 li
316.977 74.5526 li
318.185 71.7506 li
322.865 71.7506 li
324.021 74.5526 li
322.89 74.5526 li
322.89 75.5045 li
327.209 75.5045 li
327.236 74.5526 li
cp
324.716 60.3865 mo
324.716 59.6666 324.125 59.0748 323.43 59.0748 cv
322.711 59.0748 322.119 59.6666 322.119 60.3865 cv
322.119 61.0807 322.711 61.6713 323.43 61.6713 cv
324.125 61.6713 324.716 61.0807 324.716 60.3865 cv
cp
320.165 60.3865 mo
320.165 59.6666 319.574 59.0748 318.879 59.0748 cv
318.16 59.0748 317.568 59.6666 317.568 60.3865 cv
317.568 61.0807 318.16 61.6713 318.879 61.6713 cv
319.574 61.6713 320.165 61.0807 320.165 60.3865 cv
cp
318.623 70.7479 mo
320.577 66.2221 li
322.454 70.7479 li
318.623 70.7479 li
ef
340.211 74.5526 mo
338.026 74.5526 li
338.026 64.6537 li
341.78 64.6537 li
341.78 66.0944 li
342.731 66.0944 li
342.731 63.1119 li
341.78 63.1119 li
341.78 63.6256 li
332.318 63.6256 li
332.318 63.1119 li
331.392 63.1119 li
331.392 66.0944 li
332.318 66.0944 li
332.318 64.6537 li
336.072 64.6537 li
336.072 74.5526 li
333.886 74.5526 li
333.886 75.5045 li
340.211 75.5045 li
340.211 74.5526 li
f
368.848 72.7272 mo
367.923 72.7272 li
367.923 74.4752 li
361.083 74.4752 li
368.488 64.1908 li
368.488 63.6256 li
359.361 63.6256 li
359.361 63.1119 li
358.435 63.1119 li
358.435 65.9908 li
359.361 65.9908 li
359.361 64.6537 li
365.789 64.6537 li
358.435 74.9647 li
358.435 75.5045 li
368.848 75.5045 li
368.848 72.7272 li
f
388.824 63.6256 mo
383.656 63.6256 li
383.656 64.6537 li
385.584 64.6537 li
385.584 71.0819 li
385.584 73.1647 384.196 74.6561 382.267 74.6561 cv
380.39 74.6561 379.131 73.2155 379.131 71.1072 cv
379.131 64.6537 li
381.084 64.6537 li
381.084 63.6256 li
375.249 63.6256 li
375.249 64.6537 li
377.202 64.6537 li
377.202 71.6471 li
377.202 74.0639 379.208 75.8385 381.959 75.8385 cv
384.89 75.8385 386.895 73.9354 386.895 71.1588 cv
386.895 64.6537 li
388.824 64.6537 li
388.824 63.6256 li
f
412.959 75.5045 mo
415.402 75.5045 416.816 74.3729 416.816 72.3932 cv
416.816 70.4647 415.402 69.308 412.934 69.2311 cv
414.811 69.2311 416.173 68.1256 416.173 66.5826 cv
416.173 64.7826 414.785 63.6256 412.599 63.6256 cv
406.326 63.6256 li
406.326 64.5768 li
408.254 64.5768 li
408.254 74.5526 li
406.326 74.5526 li
406.326 75.5045 li
412.959 75.5045 li
cp
410.209 69.8483 mo
412.059 69.8483 li
413.757 69.8483 414.605 70.6705 414.605 72.2643 cv
414.605 73.7299 413.731 74.4752 412.034 74.4752 cv
410.209 74.4752 li
410.209 69.8483 li
cp
410.209 64.6537 mo
412.034 64.6537 li
413.294 64.6537 413.963 65.3737 413.963 66.6596 cv
413.963 67.9713 413.14 68.819 411.854 68.819 cv
410.209 68.819 li
410.209 64.6537 li
ef
433.166 73.1127 mo
432.215 73.1127 li
432.215 74.4752 li
427.843 74.4752 li
427.843 69.976 li
431.134 69.976 li
431.134 71.2615 li
432.086 71.2615 li
432.086 67.6881 li
431.134 67.7135 li
431.134 68.9479 li
427.843 68.9479 li
427.843 64.6537 li
432.06 64.6537 li
432.06 65.9908 li
432.986 65.9908 li
432.986 63.1119 li
432.034 63.1119 li
432.034 63.6256 li
423.961 63.6256 li
423.961 64.5768 li
425.89 64.5768 li
425.89 74.5526 li
423.961 74.5526 li
423.961 75.5045 li
433.166 75.5045 li
433.166 73.1127 li
f
452.291 74.5526 mo
451.571 74.5526 li
451.006 74.5526 450.517 74.244 450.08 73.601 cv
447.688 70.1049 li
449.386 69.7963 450.439 68.5365 450.439 66.8139 cv
450.439 64.7311 449.102 63.6256 446.609 63.6256 cv
440.541 63.6256 li
440.541 64.6537 li
442.47 64.6537 li
442.47 74.5526 li
440.541 74.5526 li
440.541 75.5045 li
446.351 75.5045 li
446.351 74.5526 li
444.423 74.5526 li
444.423 70.2846 li
445.683 70.2846 li
448.434 74.4244 li
449.077 75.401 449.283 75.5045 450.414 75.5045 cv
452.291 75.5045 li
452.291 74.5526 li
cp
444.423 64.6537 mo
446.223 64.6537 li
447.56 64.6537 448.28 65.4506 448.28 66.8912 cv
448.28 68.3053 447.483 69.2565 446.249 69.2565 cv
444.423 69.2565 li
444.423 64.6537 li
ef
467.558 72.9069 mo
466.632 72.9069 li
466.632 74.4752 li
462.313 74.4752 li
462.313 64.6537 li
464.241 64.6537 li
464.241 63.6256 li
458.43 63.6256 li
458.43 64.6537 li
460.359 64.6537 li
460.359 74.5526 li
458.43 74.5526 li
458.43 75.5045 li
467.558 75.5045 li
467.558 72.9069 li
f
479.482 74.5526 mo
477.554 74.5526 li
477.554 64.6537 li
479.482 64.6537 li
479.482 63.6256 li
473.672 63.6256 li
473.672 64.6537 li
475.599 64.6537 li
475.599 74.5526 li
473.672 74.5526 li
473.672 75.5045 li
479.482 75.5045 li
479.482 74.5526 li
f
498.787 64.6537 mo
500.716 64.6537 li
500.716 63.6256 li
495.548 63.6256 li
495.548 64.6537 li
497.5 64.6537 li
497.5 72.0072 li
490.276 63.6256 li
486.959 63.6256 li
486.959 64.6537 li
488.759 64.6537 li
489.274 65.3229 li
489.274 74.5526 li
487.345 74.5526 li
487.345 75.5045 li
492.513 75.5045 li
492.513 74.5526 li
490.559 74.5526 li
490.559 66.9686 li
498.015 75.7096 li
498.787 75.7096 li
498.787 64.6537 li
f
1 setflat
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
